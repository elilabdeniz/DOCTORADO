% This file was created with JabRef 2.6.
% Encoding: UTF-8

@INPROCEEDINGS{Clements2001Stepper,
  author = {John Clements and Matthew Flatt and Matthias Felleisen},
  title = {Modeling an Algebraic Stepper.},
  booktitle = {ESOP},
  year = {2001},
  pages = {320-334},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/esop/2001},
  ee = {http://link.springer.de/link/service/series/0558/bibs/2028/20280320.htm},
  file = {clements01modeling.pdf:tod/clements01modeling.pdf:PDF},
  gp_rel_debug = {2}
}

@INPROCEEDINGS{Gargiulo2001Gadget:,
  author = {Juan Gargiulo and Spiros Mancoridis},
  title = {Gadget: A Tool for Extracting the Dynamic Structure of Java Programs},
  booktitle = {SEKE},
  year = {2001},
  pages = {244-251},
  abstract = {Source code analysis and inspection does not provide
	
	enough information to describe the structure of an object-
	
	oriented program completely because there are components
	
	and relations that only exist during its runtime.
	
	 This paper presents a tool, called Gadget, that helps
	
	software engineers extract the dynamic structure of object-
	
	oriented programs written in the Java programming lan-
	
	guage. The tool uses program proﬁling, ﬁltering, and graph
	
	clustering techniques.
	
	 In this work we show how Gadget is used to analyze a
	
	standard graphical user interface library for Java, called
	
	Swing. This library has a complex structure, part of which
	
	we expose using data gathered by Gadget during the execu-
	
	tion of a simple Java program that uses Swing.},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/seke/2001},
  file = {gargiulo01gadget.pdf:gargiulo01gadget.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.18}
}

@INPROCEEDINGS{Hart1997Interactive,
  author = {Delbert Hart and Eileen Kraemer},
  title = {Interactive Visual Exploration of Distributed Computations.},
  booktitle = {IPPS},
  year = {1997},
  pages = {121-127},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/ipps/1997},
  ee = {http://www.computer.org/proceedings/ipps/7792/77920121abs.htm},
  file = {Hart1997Interactive.pdf:Hart1997Interactive.pdf:PDF},
  gp_rel_debug = {4}
}

@INPROCEEDINGS{Huot2004MaggLite,
  author = {St{\'e}phane Huot and C{\'e}dric Dumas and Pierre Dragicevic and
	Jean-Daniel Fekete and G{\'e}rard H{\'e}gron},
  title = {The MaggLite post-WIMP toolkit: draw it, connect it and run it.},
  booktitle = {UIST},
  year = {2004},
  pages = {257-266},
  abstract = {This article presents MaggLite, a toolkit and sketch-based
	
	interface builder allowing fast and interactive design of
	
	post-WIMP user interfaces. MaggLite improves design of
	
	advanced UIs thanks to its novel mixed-graph architecture
	
	that dynamically combines scene-graphs with interaction-
	
	graphs. Scene-graphs provide mechanisms to describe and
	
	produce rich graphical effects, whereas interaction-graphs
	
	allow expressive and fine-grained description of advanced
	
	interaction techniques and behaviors such as multiple
	
	pointers management, toolglasses, bimanual interaction,
	
	gesture, and speech recognition. Both graphs can be built
	
	interactively by sketching the UI and specifying the interac-
	
	tion using a dataflow visual language. Communication
	
	between the two graphs is managed at runtime by compo-
	
	nents we call Interaction Access Points. While developers
	
	can extend the toolkit by refining built-in generic mecha-
	
	nisms, UI designers can quickly and interactively design,
	
	prototype and test advanced user interfaces by applying the
	
	MaggLite principle: “draw it, connect it and run it”.},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/uist/2004},
  ee = {http://doi.acm.org/10.1145/1029632.1029677},
  file = {Huot-uist2004MaggLite.pdf:Huot-uist2004MaggLite.pdf:PDF}
}

@INPROCEEDINGS{Joshi2007SCARPE,
  author = {Shrinivas Joshi and Alessandro Orso},
  title = {{SCARPE}: {A} Technique and Tool for Selective Capture and Replay
	of Program Executions},
  booktitle = {ICSM},
  year = {2007},
  pages = {234--243},
  publisher = {IEEE},
  bibdate = {2008-11-18},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/icsm/icsm2007.html#JoshiO07},
  crossref = {conf/icsm/2007},
  file = {Joshi2007SCARPE.pdf:Joshi2007SCARPE.pdf:PDF},
  gp_rel_debug = {5},
  url = {http://dx.doi.org/10.1109/ICSM.2007.4362636}
}

@INPROCEEDINGS{Ko2004Whyline,
  author = {Andrew J. Ko and Brad A. Myers},
  title = {Designing the whyline: a debugging interface for asking questions
	about program behavior.},
  booktitle = {CHI},
  year = {2004},
  pages = {151-158},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/chi/2004},
  ee = {http://doi.acm.org/10.1145/985692.985712},
  file = {KoMyers-CHI04-Whyline.pdf:KoMyers-CHI04-Whyline.pdf:PDF},
  gp_rel_debug = {5},
  relevance = {D5}
}

@INPROCEEDINGS{Lieberman1987Reversible,
  author = {Henry Lieberman},
  title = {Reversible Object-Oriented Interpreters.},
  booktitle = {ECOOP},
  year = {1987},
  pages = {11-19},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/ecoop/1987},
  ee = {http://link.springer.de/link/service/series/0558/bibs/0276/02760011.htm},
  file = {Lieberman1987Reversible.pdf:Lieberman1987Reversible.pdf:PDF},
  gp_rel_debug = {!}
}

@INPROCEEDINGS{Lienhard2008Blueprint,
  author = {Adrian Lienhard and Tudor G\^{\i}rba and Orla Greevy and Oscar Nierstrasz},
  title = {Test Blueprint - Exposing Side Effects in Execution Traces to Support
	Writing Unit Tests},
  booktitle = {CSMR},
  year = {2008},
  pages = {83-92},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/csmr/2008},
  ee = {http://dx.doi.org/10.1109/CSMR.2008.4493303},
  file = {Lienhard2008Blueprint.pdf:Lienhard2008Blueprint.pdf:PDF},
  gp_rel_debug = {!}
}

@INPROCEEDINGS{Liu2005Metafor,
  author = {Hugo Liu and Henry Lieberman},
  title = {Metafor: visualizing stories as code.},
  booktitle = {IUI},
  year = {2005},
  pages = {305-307},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/iui/2005},
  ee = {http://doi.acm.org/10.1145/1040830.1040908},
  file = {IUI2005-metafor.pdf:IUI2005-metafor.pdf:PDF}
}

@INPROCEEDINGS{Micucci2004Time,
  author = {Daniela Micucci and Sergio Ruocco and Francesco Tisato and Andrea
	Trentini},
  title = {Time Sensitive Architectures: A Reflective Approach.},
  booktitle = {ISORC},
  year = {2004},
  pages = {183-192},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/isorc/2004},
  ee = {http://csdl.computer.org/comp/proceedings/isorc/2004/2124/00/21240183abs.htm},
  file = {Micucci_Ruocco_Tisato_Trentini_TSA_ISORC_2004.pdf:Micucci_Ruocco_Tisato_Trentini_TSA_ISORC_2004.pdf:PDF}
}

@INPROCEEDINGS{Nierstrasz2005Revival,
  author = {Oscar Nierstrasz and Alexandre Bergel and Marcus Denker and St{\'e}phane
	Ducasse and Markus G{\"a}lli and Roel Wuyts},
  title = {On the Revival of Dynamic Languages.},
  booktitle = {Software Composition},
  year = {2005},
  pages = {1-13},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/soco/2005},
  ee = {http://dx.doi.org/10.1007/11550679_1},
  file = {Nier05bRevival.pdf:Nier05bRevival.pdf:PDF}
}

@INPROCEEDINGS{Saraswat2005Clustered,
  author = {Vijay A. Saraswat and Radha Jagadeesan},
  title = {Concurrent Clustered Programming.},
  booktitle = {CONCUR},
  year = {2005},
  pages = {353-367},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/concur/2005},
  ee = {http://dx.doi.org/10.1007/11539452_28},
  file = {x10-concur.pdf:to_read/x10-concur.pdf:PDF}
}

@INPROCEEDINGS{Schaerli2003Traits,
  author = {Nathanael Schärli and St{\'e}phane Ducasse and Oscar Nierstrasz and
	Andrew P. Black},
  title = {Traits: Composable Units of Behaviour.},
  booktitle = {ECOOP},
  year = {2003},
  pages = {248-274},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/ecoop/2003},
  ee = {http://springerlink.metapress.com/openurl.asp?genre=article{\&}issn=0302-9743{\&}volume=2743{\&}spage=248},
  file = {Traits.pdf:Traits.pdf:PDF}
}

@INPROCEEDINGS{Tanter2005Versatile,
  author = {Éric Tanter and Jacques Noyé},
  title = {A Versatile Kernel for Multi-language AOP.},
  booktitle = {GPCE},
  year = {2005},
  pages = {173-188},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/gpce/2005},
  ee = {http://dx.doi.org/10.1007/11561347_13},
  file = {tanterNoye-gpce2005.pdf:to_read/tanterNoye-gpce2005.pdf:PDF}
}

@INPROCEEDINGS{Tudoreanu2000Reshapeable,
  author = {Mihail Eduard Tudoreanu and Delbert Hart and Gruia-Catalin Roman},
  title = {Reshapeable Visualizations.},
  booktitle = {ISMSE},
  year = {2000},
  pages = {245-252},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/mse/2000},
  ee = {http://csdl.computer.org/comp/proceedings/mse/2000/0933/00/09330245abs.htm},
  file = {UK-UK (Reshapeable Visualizations) MSE 2000.pdf:to_read/UK-UK (Reshapeable Visualizations) MSE 2000.pdf:PDF}
}

@INPROCEEDINGS{Ward2002Slicing,
  author = {Martin P. Ward},
  title = {Program Slicing via FermaT Transformations.},
  booktitle = {COMPSAC},
  year = {2002},
  pages = {357-362},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/compsac/2002},
  ee = {http://computer.org/proceedings/compsac/1727/17270357abs.htm},
  file = {ward02program.pdf:tod/ward02program.pdf:PDF}
}

@INPROCEEDINGS{Zeller1999Yesterday,
  author = {Andreas Zeller},
  title = {Yesterday, My Program Worked. Today, It Does Not. Why?},
  booktitle = {ESEC / SIGSOFT FSE},
  year = {1999},
  pages = {253-267},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/esec/1999},
  ee = {http://link.springer.de/link/service/series/0558/bibs/1687/16870253.htm},
  file = {Zeller1999Yesterday.pdf:Zeller1999Yesterday.pdf:PDF}
}

@INPROCEEDINGS{Zhu2004Pounamu,
  author = {Nianping Zhu and John C. Grundy and John G. Hosking},
  title = {Pounamu: A Meta-Yool for Multi-View Visual Language Environment Construction.},
  booktitle = {VL/HCC},
  year = {2004},
  pages = {254-256},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  crossref = {DBLP:conf/vl/2004},
  ee = {http://doi.ieeecomputersociety.org/10.1109/VLHCC.2004.41},
  file = {pounamu2004.pdf:pounamu2004.pdf:PDF}
}

@TECHREPORT{AgrawalBacktracking,
  author = {Hiralal Agrawal and Richard A. DeMillo and Eugene H. Spafford y},
  title = {An Execution Backtracking Approach to Program Debugging},
  institution = {Purdue University},
  file = {TR22P.pdf:tod/TR22P.pdf:PDF},
  gp_rel_debug = {!},
  keywords = {debugging},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@ARTICLE{Agrawal1993Debugging,
  author = {Hiralal Agrawal and Richard A. Demillo and Eugene H. Spafford},
  title = {Debugging with dynamic slicing and backtracking},
  journal = {Softw. Pract. Exper.},
  year = {1993},
  volume = {23},
  pages = {589--616},
  number = {6},
  address = {New York, NY, USA},
  doi = {http://dx.doi.org/10.1002/spe.4380230603},
  file = {Agrawal1993Debugging.pdf:Agrawal1993Debugging.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0038-0644},
  publisher = {John Wiley \& Sons, Inc.}
}

@ARTICLE{Aguilera2003Performance,
  author = {Marcos K. Aguilera and Jeffrey C. Mogul and Janet L. Wiener and Patrick
	Reynolds and Athicha Muthitacharoen},
  title = {Performance debugging for distributed systems of black boxes},
  journal = {SIGOPS Oper. Syst. Rev.},
  year = {2003},
  volume = {37},
  pages = {74--89},
  number = {5},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1165389.945454},
  file = {Aguilera2003Performance.pdf:Aguilera2003Performance.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0163-5980},
  publisher = {ACM Press}
}

@ARTICLE{Allan2005TraceMatch,
  author = {Chris Allan and Pavel Avgustinov and Aske Simon Christensen and Laurie
	Hendren and Sascha Kuzins and Ondřej Lhoták and Oege de Moor and
	Damien Sereni and Ganesh Sittampalam and Julian Tibble},
  title = {Adding trace matching with free variables to AspectJ},
  journal = {SIGPLAN Not.},
  year = {2005},
  volume = {40},
  pages = {345--364},
  number = {10},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1103845.1094839},
  file = {Allan2005TraceMatch.pdf:Allan2005TraceMatch.pdf:PDF},
  issn = {0362-1340},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Altekar2009ODR,
  author = {Gautam Altekar and Ion Stoica},
  title = {{ODR}: Output-Deterministic Replay for multicore debugging},
  booktitle = {Proceedings of the 22nd Symposium on Operating Systems Principles
	(22nd SOSP'09), Operating Systems Review (OSR)},
  year = {2009},
  pages = {193--206},
  address = {Big Sky, MT},
  month = oct,
  publisher = {ACM SIGOPS},
  note = {UC Berkeley},
  file = {Altekar2009ODR.pdf:Altekar2009ODR.pdf:PDF},
  gp_rel_debug = {5},
  keywords = {parallel debugging, Categories \& Subject Descriptors: D.2.5 [Software
	Engineering]: testing and debugging -- debugging aids; General Terms:
	reliability, design, performance; Keywords: deterministic replay,
	multicore, debugging, inference;},
  review = {Output-determinism is the amount of determinism required for a program
	replay to produce the same output as the original. It is less strict
	than value-determinism, because it doesn't guarantee that all data
	races have the same outcome.
	
	On the other hand it reduces the recording overhead.
	
	But how useful is it? This is not discussed at all.
	
	Rather complex algorithms, it seems (I didn't finish the paper...)
	
	Recording overhead between 1.6x and 4.5x}
}

@PHDTHESIS{Ko2008Dissertation,
  author = {Andrew J. Ko},
  title = {Asking and Answering Questions about the Causes of Software Behavior},
  school = {School of Computer Science, Carnegie Mellon University},
  year = {2008},
  file = {Ko2008Dissertation.pdf:Ko2008Dissertation.pdf:PDF},
  gp_rel_debug = {5},
  owner = {gpothier},
  timestamp = {2008.06.23}
}

@INPROCEEDINGS{Avgustinov2006Monitoring,
  author = {Pavel Avgustinov and Eric Bodden and Elnar Hajiyev and Laurie Hendren
	and Ondrej Lhotak and Oege de Moor and Neil Ongkingco and Damien
	Sereni and Ganesh Sittampalam and Julian Tibble and Mathieu Verbaere},
  title = {Aspects for Trace Monitoring},
  booktitle = {FATES/RV 2006},
  year = {2006},
  editor = {K. Havelund et al},
  pages = {20--39},
  file = {Avgustinov2006Monitoring.pdf:Avgustinov2006Monitoring.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.11.10}
}

@INPROCEEDINGS{Ayers2005TraceBack,
  author = {Ayers, Andrew and Schooler, Richard and Metcalf, Chris and Agarwal,
	Anant and Rhee, Junghwan and Witchel, Emmett},
  title = {TraceBack: first fault diagnosis by reconstruction of distributed
	control flow},
  booktitle = {PLDI '05: Proceedings of the 2005 ACM SIGPLAN conference on Programming
	language design and implementation},
  year = {2005},
  pages = {201--212},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1065010.1065035},
  file = {Ayers2005TraceBack.pdf:Ayers2005TraceBack.pdf:PDF},
  gp_rel_debug = {!!!},
  isbn = {1-59593-056-6},
  location = {Chicago, IL, USA}
}

@TECHREPORT{Babaoglu1993Consistent,
  author = {Ozalp Babaoglu and Keith Marzullo},
  title = {Consistent Global States of Distributed Systems: Fundamental Concepts
	and Mechanisms},
  institution = {Laboratory for Computer Science
	
	University of Bologna},
  year = {1993},
  file = {babaoglu01consistent.pdf:babaoglu01consistent.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.06.18}
}

@INPROCEEDINGS{Badros1998Cassowary,
  author = {Greg J. Badros and Alan Borning},
  title = {The Cassowary Linear Arithmetic Constraint Solving Algorithm: Interface
	and Implementation},
  year = {1998},
  file = {cassowary-tr.pdf:cassowary-tr.pdf:PDF},
  owner = {gpothier},
  quality = {5},
  relevance = {2},
  review = {Description of an efficient constraint solving algorithm
	
	Description of a Java library implementing the algorithm},
  timestamp = {2006.02.18}
}

@INPROCEEDINGS{BalzarottiSlicing,
  author = {Davide Balzarotti and Mattia Monga},
  title = {Using Program Slicing to Analyze Aspect Oriented Composition},
  file = {balzarotti04using.pdf:tod/balzarotti04using.pdf:PDF},
  keywords = {debugging slicing},
  owner = {gpothier},
  timestamp = {2006.02.18}
}

@INPROCEEDINGS{Balzer1969EXDAMS,
  author = {R. M. Balzer},
  title = {{EXDAMS}-- Extendable Debugging and Monitoring},
  booktitle = {Proceedings of the AFIPS Spring Joint Computer Conference},
  year = {1969},
  pages = {567--580},
  bibdate = {Fri Aug 31 11:00:14 1984},
  gp_quality = {5},
  gp_rel_debug = {5},
  key = {Balzer},
  relevance = {D5},
  review = {EXDAMS provides a great part of the functionality of TOD: forward/backward
	execution, state reconstitution, causality links. However it deals
	with procedural languages, not OO ones.
	
	As in TOD, it processes by instrumenting the program (at the source
	level) and recording execution trace (without indexing), so that
	the execution trace can be easily navigated.}
}

@PHDTHESIS{Bardohl1999Thesis,
  author = {Roswitha Bardohl},
  title = {GENGED: Visual Deﬁnition of Visual Languages based on Algebraic Graph
	Transformation},
  school = {Technischen Universität Berlin},
  year = {1999},
  file = {bardohl99genged.pdf:bardohl99genged.pdf:PDF},
  keywords = {visual languages},
  owner = {gpothier},
  timestamp = {2006.02.25}
}

@INPROCEEDINGS{Bardohl1997Defining,
  author = {Roswitha Bardohl and Gabriele Taentzer},
  title = {Defining Visual Languages by Algebraic Specification Techniques and
	Graph Grammars},
  year = {1997},
  keywords = {visual languages},
  owner = {gpothier},
  timestamp = {2006.02.25}
}

@INPROCEEDINGS{Berndl2003PointsTo,
  author = {Marc Berndl and Ondrej Lhot\'{a}k and Feng Qian and Laurie Hendren
	and Navindra Umanee},
  title = {Points-to analysis using BDDs},
  booktitle = {PLDI '03: Proceedings of the ACM SIGPLAN 2003 conference on Programming
	language design and implementation},
  year = {2003},
  pages = {103--114},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/781131.781144},
  file = {Berndl2003PointsTo.pdf:Berndl2003PointsTo.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-58113-662-5},
  location = {San Diego, California, USA}
}

@ARTICLE{Beynon2002Parallel,
  author = {Michael D. Beynon and Henrique Andrade and Joel Saltz},
  title = {Low-Cost Non-Intrusive Debugging Strategies for Distributed Parallel
	Programs},
  journal = {cluster},
  year = {2002},
  volume = {00},
  pages = {439},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/CLUSTR.2002.1137778},
  file = {BeynonLowCostDebugging.pdf:BeynonLowCostDebugging.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {3},
  isbn = {0-7695-1745-5},
  publisher = {IEEE Computer Society},
  relevance = {D5},
  review = {Short paper outlining five punctual strategies for debugging distributed
	programs:
	
	Remote Output Viewing: the output of each node is centralized at a
	console
	
	Just-In-Time debugging: attach a debugger on the fly at a particular
	node
	
	Collective debugging: send GDB commands to a set of nodes
	
	Dynamic state inspection: obtain the state of a collection of nodes
	
	Message Passing Transparent Debugging: intercept and log messages}
}

@INPROCEEDINGS{Bhansali2006Nirvana,
  author = {Sanjay Bhansali and Wen-Ke Chen and Stuart de Jong and Andrew Edwards
	and Ron Murray and Milenko Drini\'{c} and Darek Miho\v{c}ka and Joe
	Chau},
  title = {Framework for instruction-level tracing and analysis of program executions},
  booktitle = {VEE '06: Proceedings of the second international conference on Virtual
	execution environments},
  year = {2006},
  pages = {154--163},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1134760.1220164},
  file = {Bhansali2006Nirvana.pdf:Bhansali2006Nirvana.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {1-59593-332-6},
  location = {Ottawa, Ontario, Canada},
  review = {Nirvana and iDNA are the components of a framework that permits:
	
	- Capturing the execution trace of x86 binary programs
	
	- Replaying the trace
	
	- Writing applications using an API on the trace.
	
	
	One such application is a back-in-time debugger.
	
	Binaries are instrumented on the fly and the debugger can be attached
	to a running process.
	
	Optimizations permit to consume about 1 bit of storage per executed
	instruction. Runtime overhead is between 5x and 17x.
	
	Values of memory reads and writes are logged. Memory reads are logged
	only if the read value differs from the previously read or written
	value.
	
	Timestamping is lazy, ie. at synchronization points, and at some regular
	interval, but not at each instruction.
	
	
	They claim the debugging tool is able to retrieve previous memory
	location write but it is not clear how it is done efficiently for
	write events far away from the current event.
	
	
	Many interesting references.}
}

@INPROCEEDINGS{Binder2007Advanced,
  author = {Walter Binder and Jarle Hulaas and Philippe Moret},
  title = {Advanced Java bytecode instrumentation},
  booktitle = {PPPJ},
  year = {2007},
  editor = {Vasco Amaral and Luis Marcelino and Lu{\'i}s Veiga and H. Conrad
	Cunningham},
  volume = {272},
  series = {ACM International Conference Proceeding Series},
  pages = {135--144},
  publisher = {ACM},
  bibdate = {2007-10-22},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/pppj/pppj2007.html#BinderHM07},
  file = {Binder2007Advanced.pdf:Binder2007Advanced.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {4},
  isbn = {978-1-59593-672-1},
  url = {http://doi.acm.org/10.1145/1294325.1294344}
}

@ARTICLE{Blasgen1977Storage,
  author = {M. Blasgen and K. Eswaran},
  title = {Storage and Access in Relational Databases},
  journal = {IBM Systems Journal},
  year = {1977},
  volume = {16},
  pages = {363},
  number = {4},
  file = {Blasgen1977Storage.pdf:Blasgen1977Storage.pdf:PDF},
  keywords = {SystemR algorithms join methods joins}
}

@INPROCEEDINGS{Booth1997TimeTravel,
  author = {Simon P. Booth and Simon B. Jones},
  title = {Walk Backwards to Happiness - Debugging by Time Travel},
  booktitle = {Automated and Algorithmic Debugging},
  year = {1997},
  pages = {171-183},
  file = {Booth1997TimeTravel.pdf:Booth1997TimeTravel.pdf:PDF},
  gp_quality = {!},
  gp_rel_debug = {5},
  url = {citeseer.ist.psu.edu/booth97walk.html}
}

@INPROCEEDINGS{Boothe2000Bidirectional,
  author = {Bob Boothe},
  title = {Efficient algorithms for bidirectional debugging},
  booktitle = {PLDI '00: Proceedings of the ACM SIGPLAN 2000 conference on Programming
	language design and implementation},
  year = {2000},
  pages = {299--310},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/349299.349339},
  file = {Boothe2000Bidirectional.pdf:Boothe2000Bidirectional.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {1-58113-199-2},
  location = {Vancouver, British Columbia, Canada},
  review = {Bdb is a bidirectional debugger for C with the following characteristics:
	
	- Backward movements are simulate through re-execution until a specific
	point
	
	- Periodic checkpoints are taken so that only a portion of the program
	must be reexecuted
	
	- The results of system calls are (optionally) recorded so as to ensure
	deterministic replay.
	
	
	One of the design goals of Bdb is to be efficient. This is achieved
	through the use of counters instead of trap instructions, so that
	the number of context switches between debuggee and debugger is reduced.
	
	
	Performance measurements are provided. Overhead of counters on forward
	execution is reasonable (below 200%). Latency of navigation commands
	is said to be compatible with interactive use, but it seems that
	it is not true if several large navigation steps are taken.}
}

@ARTICLE{Borgeest1996Relational,
  author = {Rolf Borgeest and Christian Rodel},
  title = {Trace Analysis with a Relational Database System},
  journal = {pdp},
  year = {1996},
  volume = {00},
  pages = {0243},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/EMPDP.1996.500593},
  file = {borgeest96.pdf:borgeest96.pdf:PDF},
  gp_quality = {2},
  gp_rel_debug = {5},
  isbn = {0-8186-7376-1},
  keywords = {trace analysis, relational database},
  publisher = {IEEE Computer Society},
  relevance = {D5},
  review = {The paper presents uses a trace analysis tool named TATOO and compare
	its performance when the trace data is in memory vs. relational database.
	
	Trace format is customizable, as well as measurements.
	
	The system is geared towards performance monitoring rather than back-in-time
	debugging.
	
	Benchmarks: 300ev/s input rate. Query rate not given.}
}

@MISC{Bracha2004PluggableTypeSystems,
  author = {Gilad Bracha},
  title = {Pluggable Type Systems},
  year = {2004},
  file = {Bracha-PluggableTypes.pdf:to_read/Bracha-PluggableTypes.pdf:PDF},
  gp_quality = {4},
  gp_rel_lang = {5},
  keywords = {languages type systems},
  owner = {gpothier},
  quality = {4},
  relevance = {L5},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Bravenboer2004Concrete,
  author = {Martin Bravenboer and Eelco Visser},
  title = {Concrete syntax for objects: domain-specific language embedding and
	assimilation without restrictions},
  booktitle = {OOPSLA '04: Proceedings of the 19th annual ACM SIGPLAN conference
	on Object-oriented programming, systems, languages, and applications},
  year = {2004},
  pages = {365--383},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1028976.1029007},
  file = {Bravenboer2004Concrete.pdf:Bravenboer2004Concrete.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {4},
  isbn = {1-58113-831-9},
  location = {Vancouver, BC, Canada}
}

@INPROCEEDINGS{Brown2002STEP,
  author = {Rhodes Brown and Karel Driesen and David Eng and Laurie Hendren and
	John Jorgensen and Clark Verbrugge and Qin Wang},
  title = {{STEP}: A Framework for the Efficient Encoding of General Trace Data},
  booktitle = {Proceedings of the 2002 {ACM SIGPLAN-SIGSOFT} Workshop onProgram
	Anaylsis for Software Tools and Engineering ({PASTE})},
  year = {2002},
  address = {New York, New York, United States},
  month = nov,
  publisher = {{ACM} Press},
  abstract = {Traditional tracing systems are often limited to recording a fixed
	set ofbasic program events. This limitation can frustrate an application
	orcompiler developer who is trying to understand and characterize
	the complexbehavior of software systems such as a Java program running
	on a JavaVirtual Machine. In the past, many developers have resorted
	to specializedtracing systems that target a particular type of program
	event. Thisapproach often results in an obscure and poorly documented
	encoding formatwhich can limit the reuse and sharing of potentially
	valuable information.To address this problem, we present STEP, a
	system designed to provideprofiler developers with a standard method
	for encoding general programtrace data in a flexible and compact
	format. The system consists of a tracedata definition language along
	with a compiler and an architecture thatsimplifies the client interface
	by encapsulating the details of encodingand interpretation.},
  annote = {See also: Sable TR 2002-7},
  file = {Brown2002STEP.pdf:Brown2002STEP.pdf:PDF},
  gp_rel_debug = {!!},
  location = {Charleston, South Carolina, United States}
}

@INPROCEEDINGS{Bruneton2002ASM,
  author = {{\'E}ric Bruneton and Romain Lenglet and Thierry Coupaye},
  title = {{ASM}: a code manipulation tool to implement adaptable systems},
  booktitle = {Proceedings of the {ASF} ({ACM} {SIGOPS} {F}rance) Journ{\'e}es Composants
	2002: Adaptable and extensible component systems},
  year = {2002},
  month = NOV,
  abstract = {ASM is a Java class manipulation tool designed to dynamically generate
	and manipulate Java classes, which are useful techniques to implement
	adaptable systems. ASM is based on a new approach, compared to equivalent
	existing tools, which consists in using the "visitor" design pattern
	without explicitly representing the visited tree with objects. This
	new approach gives much better performances than those of existing
	tools, for most of practical needs.},
  file = {Bruneton2002ASM.pdf:Bruneton2002ASM.pdf:PDF},
  location = {Grenoble, France},
  url = {http://www.objectweb.org/asm/current/asm-eng.pdf}
}

@ARTICLE{Bryant1992OBDD,
  author = {Randal E. Bryant},
  title = {Symbolic Boolean manipulation with ordered binary-decision diagrams},
  journal = {ACM Comput. Surv.},
  year = {1992},
  volume = {24},
  pages = {293--318},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/136035.136043},
  file = {Bryant1992OBDD.pdf:Bryant1992OBDD.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0360-0300},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Carney2002Streams,
  author = {Donald Carney and Ugur \c{C}etintemel and Mitch Cherniack and Christian
	Convey and Sangdon Lee and Greg Seidman and Michael Stonebraker and
	Nesime Tatbul and Stanley B. Zdonik},
  title = {Monitoring Streams - A New Class of Data Management Applications.},
  booktitle = {VLDB},
  year = {2002},
  pages = {215-226},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://www.vldb.org/conf/2002/S07P02.pdf},
  file = {aurora_tr.pdf:to_read/aurora_tr.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {4},
  quality = {5},
  relevance = {D4},
  review = {Presentation of Aurora, a database system specifically designed for
	handling high throughput input streams and performing continuous
	queries on them using a workflow language.
	
	The application domain is sensor monitoring, where multiple heterogenous
	sensors provide a constant feed of input tuples to the system. The
	input streams are monitored so as to generate interesting events
	for applications.
	
	Tuple streams are routed from sources to sinks. Primordial sources
	are sensors and terminal sinks are applications. Inbetween are Boxes,
	that are processors that receive on input stream and emit one output
	stream, which may be connected to 0..n sinks. Boxes perform basic
	operations such as filtering, mapping, or joins over a Window of
	tuples (all the tuples in the queue up to a certain age).
	
	The paper focuses on the optimization of such a system. The prevalent
	ideas is to use Quality of Service metrics to take scheduling, memory
	management and Load Schedding decisions.
	
	
	Notes:
	
	tuples are timestamped when they enter the Aurora system. It would
	be interesting to handle tuples that enter the system with an existing
	timestamp, which raises the possibility of ordering glitches. Is
	it possible to "repair" such glitches by re-running boxes that have
	already been fed with inaccurate tuples?
	
	
	Interesting references:
	
	[3] R. Avnur and J. Hellerstein. Eddies: Continuously
	
	 Adaptive Query Processing. In Proc. of the SIGMOD
	
	 Conf., Dallas, TX, 2000.
	
	
	[13] C. Hidber. Online Association Rule Mining. In
	
	 Proceedings of the 1999 ACM SIGMOD International
	
	 Conference on Management of Data, Philadelphia,
	
	 PA, 1999.
	
	
	[15] H. V. Jagadish, I. S. Mumick, and A. Silberschatz.
	
	 View Maintenance Issues for the Chronicle Data
	
	 Model. In Proc. of the 14th PODS, 1995.
	
	
	[16] B. Kao and H. Garcia-Molina, “An Overview of
	
	 Realtime Database Systems,” in Real Time
	
	 Computing, W. A. Halang and A. D. Stoyenko, Eds.:
	
	 Springer-Verlag, 1994.
	
	
	
	
	[18] S. R. Madden, M. A. Shaw, J. M. Hellerstein, and V.
	
	 Raman. Continuously Adaptive Continuous Queries
	
	 Over Streams. In Proc. of the SIGMOD Conf.,
	
	 Wisconsin, USA, 2002.
	
	
	[20] G. Ozsoyoglu and R. T. Snodgrass. Temporal and
	
	 Real-Time Databases: A Survey. IEEE Transactions
	
	 on Knowledge and Data Engineering (TKDE),
	
	 7(4):513-532, 1995.
	
	
	
	[25] P. Seshadri, M. Livny, and R. Ramakrishnan. The
	
	 Design and Implementation of a Sequence Database
	
	 System. In Proc. of the 22th VLDB, India, 1996.}
}

@ARTICLE{Carothers1999Optimistic,
  author = {Christopher D. Carothers and Kalyan S. Perumalla and Richard M. Fujimoto},
  title = {Efficient optimistic parallel simulations using reverse computation},
  journal = {ACM Trans. Model. Comput. Simul.},
  year = {1999},
  volume = {9},
  pages = {224--253},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/347823.347828},
  file = {Carothers1999Optimistic.pdf:Carothers1999Optimistic.pdf:PDF},
  gp_rel_debug = {2},
  issn = {1049-3301},
  publisher = {ACM Press},
  review = {Does not deal with debugging but with reverse computation vs. snapshots.}
}

@INPROCEEDINGS{Chatty2008Multidisciplinary,
  author = {Stéphane Chatty},
  title = {Supporting multidisciplinary software composition for interactive
	applications},
  booktitle = {Proceedings of the 8th symposium on Software Composition (SC 2008)},
  year = {2008},
  file = {Chatty2008Multidisciplinary.pdf:Chatty2008Multidisciplinary.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {0},
  gp_rel_lang = {5},
  owner = {gpothier},
  review = {Describes the I* model for creating interactive applications.
	
	Very similar to uithin...},
  timestamp = {2008.04.09}
}

@ARTICLE{Chen2001Reversible,
  author = {Shyh-Kwei Chen and W. Kent Fuchs and Jen-Yao Chung},
  title = {Reversible Debugging Using Program Instrumentation},
  journal = {IEEE Trans. Softw. Eng.},
  year = {2001},
  volume = {27},
  pages = {715--727},
  number = {8},
  address = {Piscataway, NJ, USA},
  doi = {http://dx.doi.org/10.1109/32.940726},
  file = {Chen2001Reversible.pdf:Chen2001Reversible.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0098-5589},
  publisher = {IEEE Press}
}

@INPROCEEDINGS{Chern2007ControlFlow,
  author = {Rick Chern and Kris De Volder},
  title = {Debugging with control-flow breakpoints},
  booktitle = {AOSD '07: Proceedings of the 6th international conference on Aspect-oriented
	software development},
  year = {2007},
  pages = {96--106},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1218563.1218575},
  file = {Chern2007ControlFlow.pdf:Chern2007ControlFlow.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {1-59593-615-7},
  location = {Vancouver, British Columbia, Canada},
  review = {CBD is a Control-flow Breakpoint Debugger built on top of the Eclipse
	JDT debugger. It permits to refine static breakpoints by adding dynamic
	conditions based on the control flow at the moment the breakpoint
	is reached. At a semantic level, a pointcut language loosely based
	on a subset of that of AspectJ is used to define the breakpoints,
	but in practice those pointcuts are specified through a menu-based
	GUI.
	
	The GUI permits to either exclude joinpoints that are within the control
	flow of the current breakpoint, or to only include joinpoints that
	were within the control flow of the first time the breakpoint was
	reached. In addition to conditions on control flow, there are also
	similar conditions on before/after a particular line number is reached.
	
	The authors conducted an informal evaluation of the expressive power
	of the GUI to solve documented bugs of open-source applications,
	with interesting results (although the number of test cases is small
	and the only test subject is one of the authors).
	
	Many interesting references.}
}

@INPROCEEDINGS{Chilimbi2001Locality,
  author = {Trishul M. Chilimbi},
  title = {Efficient representations and abstractions for quantifying and exploiting
	data reference locality},
  booktitle = {PLDI '01: Proceedings of the ACM SIGPLAN 2001 conference on Programming
	language design and implementation},
  year = {2001},
  pages = {191--202},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/378795.378840},
  file = {Chilimbi2001Locality.pdf:Chilimbi2001Locality.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-58113-414-2},
  location = {Snowbird, Utah, United States}
}

@INCOLLECTION{Choi1990Debugger,
  author = {Jong-Deok Choi and Barton P. Miller},
  title = {Code Generation and Separate Compilation in a Parallel Program Debugger},
  booktitle = {Languages and Compilers for Parallel Computing},
  publisher = {MIT Press},
  year = {1990},
  editor = {David Gelernter and Alexandru Nicolau and David Padua},
  pages = {149--169},
  file = {Choi1990Debugger.pdf:Choi1990Debugger.pdf:PDF},
  gp_rel_debug = {4},
  url = {citeseer.ist.psu.edu/choi90code.html}
}

@INPROCEEDINGS{Choi1998Deterministic,
  author = {Jong-Deok Choi and Harini Srinivasan},
  title = {Deterministic replay of Java multithreaded applications},
  booktitle = {SPDT '98: Proceedings of the SIGMETRICS symposium on Parallel and
	distributed tools},
  year = {1998},
  pages = {48--59},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/281035.281041},
  file = {Choi1998Deterministic.pdf:Choi1998Deterministic.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {1-58113-001-5},
  location = {Welches, Oregon, United States},
  review = {A trace/replay system for Java programs with low runtime and replay
	overhead (usually less than 100%). However the results were obtained
	on an old version of the JVM, probably without JIT.
	
	The main idea is to have a global clock for the process and a local
	clock for each thread, and at each "critical event" (read or write
	of a shared variable), each clock is incremented; whenever the local
	clock and the global clock disagree, it means another thread has
	been scheduled in between (and the clocks are then resynced).}
}

@INPROCEEDINGS{Choi1991Balancing,
  author = {Jong-Deok Choi and Janice M. Stone},
  title = {Balancing runtime and replay costs in a trace-and-replay system},
  booktitle = {PADD '91: Proceedings of the 1991 ACM/ONR workshop on Parallel and
	distributed debugging},
  year = {1991},
  pages = {26--35},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/122759.122761},
  file = {Choi1991Balancing.pdf:Choi1991Balancing.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {0-89791-457-0},
  location = {Santa Cruz, California, United States}
}

@INPROCEEDINGS{Clement2003AJDT,
  author = {Andy Clement and Adrian Colyer and Mik Kersten},
  title = {Aspect-Oriented Programming with {AJDT}},
  booktitle = {ECOOP Workshop on Analysis of Aspect-Oriented Software},
  year = {2003},
  file = {Clement2003AJDT.pdf:Clement2003AJDT.pdf:PDF},
  gp_rel_debug = {3}
}

@INPROCEEDINGS{Clements2001Little,
  author = {John Clements and Paul T. Graunke and Shriram Krishnamurthi and Matthias
	Felleisen},
  title = {Little Languages and their Programming Environments},
  booktitle = {Proceedings of Monterey Workshop on Engineering Automation for Software
	Intensive System Integration},
  year = {2001},
  file = {Clements2001Little.pdf:Clements2001Little.pdf:PDF},
  gp_rel_debug = {!},
  owner = {gpothier},
  timestamp = {2007.05.17}
}

@INPROCEEDINGS{Consens1994Visualizing,
  author = {Mariano P. Consens and Masum Z. Hasan and Alberto O.
	
	 Mendelzon},
  title = {Visualizing and Querying Distributed Event Traces with {H}y+},
  booktitle = {Proceedings of the International Conference on Application of Databases},
  year = {1994},
  volume = {819},
  pages = {123--141},
  publisher = {LNCS},
  bibdate = {2002-01-03},
  bibsource = {DBLP,
	
	 http://dblp.uni-trier.de/db/conf/adb/adb94.html#ConsensHM94},
  file = {Consens1994Visualizing.pdf:Consens1994Visualizing.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  keywords = {event traces, visualization},
  quality = {5},
  relevance = {D5},
  review = {Hy+/GraphLog is a system for visualizing structural data. New visualizations
	are constructed from base facts or other visualizations through GraphLog
	queries, which are expressed in a graphical language; it reminds
	of example-based programming.
	
	They present the use of Hy+ for trace analysis. Interesting possibilities
	of abstraction and filtering, very customizable visualizations.
	
	Nothing about efficiency or manageable volumes.}
}

@MISC{AOPHarmful,
  author = {Constantinos Constantinides and Therapon Skotiniotis and Maximilian
	Stoerzer‡},
  title = {AOP considered harmful},
  year = {2004},
  file = {stoerzer04aop_harmful.pdf:stoerzer04aop_harmful.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Cook2002Reverse,
  author = {Jonathan J. Cook},
  title = {Reverse Execution of Java Bytecode},
  year = {2002},
  abstract = {We demonstrate a model, including operational semantics, for the reverse
	execution of stack-based
	
	code. We discuss our modiﬁcation of the Kaffe implementation of the
	Java Virtual Machine,
	
	supporting a debugger capable of running Java bytecode backwards.
	We achieve reverse execution
	
	by logging the state lost during each operation or by directly reversing
	instructions. Our debugger
	
	has facilities for stepping, stepping over methods and running to
	breakpoints, in both directions.
	
	Multi-threading is supported. It is also possible to step through
	the bytecode when the Java source
	
	code is not available. The debugger has both a command line user interface
	and a graphical user
	
	 interface with facilities for editing code and running the Java compiler.},
  file = {cook02reverse.pdf:tod/cook02reverse.pdf:PDF},
  gp_quality = {4.5},
  gp_rel_debug = {5},
  keywords = {debugging},
  owner = {gpothier},
  quality = {4.5},
  relevance = {D5},
  review = {A debugger that logs state modifications of the JVM stack in circular
	buffers, permits to execute the program backwards.
	
	Implemented by modifying the interpreter (Kaffee), not by instrumentation.
	
	
	A bit low level in some respects, the formalese part is a bit superfluous.
	
	Interesting read however.
	
	Clever processing of exceptions.
	
	Interesting references.
	
	
	Drawbacks:
	
	- forward/backward execution only. Cannot "go to last assignment of
	variable X"
	
	- Everything must be instrumented in order to properly execute backwards
	(to take side effects into account). No checkpointing.
	
	- Benchmarks show relatively poor performance, as the interpreter
	is modified, not the compiler.
	
	
	Conclusions:
	
	- Checkponts (heap snapshots) for TOD?
	
	
	Interesting refs:
	
	[15] Johnson, J. D. and Kenney, G. W. (1983) Implementation issues
	for a source level symbolic debugger extended abstract). ACM SIGPLAN
	Notices, 18, 149–151.
	
	[16] Choi, J. and Srinivasan, H. (1998) Deterministic replay of Java
	multithreaded applications. In Proc. SIGMETRICS Symp. on Parallel
	and Distributed Tools, Welches, OR, 3–4 August 1998, pp. 48–59. ACM,
	New York.
	
	[17] InCert TraceBack homepage. http://www.debugjava.com/, 6 May 2002.},
  timestamp = {2006.02.18}
}

@INPROCEEDINGS{Cornelis2003Taxonomy,
  author = {Frank Cornelis and Andy Georges and Mark Christiaens and Michiel
	Ronsse and Tom Ghesquiere and Koen De Bosschere},
  title = {A Taxonomy of Execution Replay Systems},
  booktitle = {In Proceedings of the International Conference on Advances in Infrastructure
	for Electronic Business, Education, Science, Medicine, and Mobile
	Technologies on the Internet},
  year = {2003},
  file = {Cornelis2003Taxonomy.pdf:Cornelis2003Taxonomy.pdf:PDF},
  gp_rel_debug = {!!}
}

@INPROCEEDINGS{CortesSignatures,
  author = {Corinna Cortes and Kathleen Fisher and Daryl Pregibon and Anne Rogers},
  title = {Hancock: A Language for Extracting Signatures from Data Streams},
  file = {KDD2000.pdf:to_read/KDD2000.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Czarnecki2005Overview,
  author = {Krzysztof Czarnecki},
  title = {Overview of Generative Software Development},
  booktitle = {Unconventional Programming Paradigms (UPP) 2004},
  year = {2005},
  editor = {J.-P. Banâtre et al.},
  volume = {LNCS 3566},
  pages = {313-–328},
  file = {Czarnecki2005Overview.pdf:Czarnecki2005Overview.pdf:PDF},
  gp_rel_debug = {!},
  owner = {gpothier},
  timestamp = {2007.05.18}
}

@INPROCEEDINGS{Czyz2007Declarative,
  author = {Jeffrey K. Czyz and Bharat Jayaraman},
  title = {Declarative and visual debugging in Eclipse},
  booktitle = {eclipse '07: Proceedings of the 2007 OOPSLA workshop on eclipse technology
	eXchange},
  year = {2007},
  pages = {31--35},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1328279.1328286},
  file = {Czyz2007Declarative.pdf:Czyz2007Declarative.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  isbn = {978-1-60558-015-9},
  location = {Montreal, Quebec, Canada},
  review = {The paper describes the Eclipse integration of Jive, a declarative
	debugger for Java.
	
	Jive creates object and sequence diagrams based on actual execution
	events.
	
	It supports bidirectional stepping, but distant jumps are not scalable
	(each step has to be performed forward or backward).
	
	Trace capture is through JPDA, must be terribly slow.
	
	The paper dives into some not really interesting technical details
	of the Eclipse integration.}
}

@INPROCEEDINGS{Dallmeier2005Ample,
  author = {Valentin Dallmeier and Christian Lindig and Andreas Zeller},
  title = {Lightweight bug localization with AMPLE},
  booktitle = {AADEBUG'05: Proceedings of the sixth international symposium on Automated
	analysis-driven debugging},
  year = {2005},
  pages = {99--104},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1085130.1085143},
  file = {Dallmeier2005Ample.pdf:Dallmeier2005Ample.pdf:PDF},
  gp_rel_debug = {5},
  isbn = {1-59593-050-7},
  location = {Monterey, California, USA}
}

@INPROCEEDINGS{DenierTraits,
  author = {Simon Denier},
  title = {Traits Programming with AspectJ},
  file = {TraitsAspectJ.pdf:TraitsAspectJ.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Desnoyers2006Tracer,
  author = {Mathieu Desnoyers and Michel R. Dagenais},
  title = {The LTTng tracer: A low impact performance and behavior monitor for
	GNU/Linux},
  booktitle = {Proceedings of the Ottawa Linux Symposium},
  year = {2006},
  volume = {1},
  pages = {209--223},
  file = {Desnoyers2006Tracer.pdf:Desnoyers2006Tracer.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  gp_rel_lang = {0},
  owner = {gpothier},
  review = {The paper describes a high-performance tracing system for Linux.
	
	Automatic instrumentation of C code.
	
	High resolution monotonic timer
	
	Many low-level details about the implementation.
	
	Claims that multi-GB traces can be viewed but not explained.},
  timestamp = {2007.03.28}
}

@ARTICLE{Deursen2000DSLs,
  author = {Arie van Deursen and Paul Klint and Joost Visser},
  title = {Domain-specific languages: an annotated bibliography},
  journal = {SIGPLAN Not.},
  year = {2000},
  volume = {35},
  pages = {26--36},
  number = {6},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/352029.352035},
  gp_rel_debug = {!},
  issn = {0362-1340},
  publisher = {ACM Press}
}

@TECHREPORT{VanDeursenTracking,
  author = {A. Van Deursen and P. Klint and F. Tip},
  title = {Origin Tracking},
  file = {vandeursen92origin.pdf:tod/vandeursen92origin.pdf:PDF},
  gp_rel_debug = {0},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@ARTICLE{Dewitt1990Gamma,
  author = {Dewitt,, D. J. and Ghandeharizadeh,, S. and Schneider,, D. A. and
	Bricker,, A. and Hsiao,, H. -I. and Rasmussen,, R.},
  title = {The Gamma Database Machine Project},
  journal = {IEEE Trans. on Knowl. and Data Eng.},
  year = {1990},
  volume = {2},
  pages = {44--62},
  number = {1},
  address = {Piscataway, NJ, USA},
  doi = {http://dx.doi.org/10.1109/69.50905},
  file = {Dewitt1990Gamma.pdf:Dewitt1990Gamma.pdf:PDF},
  gp_rel_debug = {5},
  issn = {1041-4347},
  publisher = {IEEE Educational Activities Department}
}

@INCOLLECTION{Douence2005TraceBased,
  author = {Remi Douence and Pascal Fradet and Mario {S{\"u}dholt}},
  title = {Trace-Based Aspects},
  booktitle = {Aspect-Oriented Software Development},
  publisher = {Addison-Wesley},
  year = {2005},
  editor = {Robert E. Filman and Tzilla Elrad and Siobh\'an Clarke and Mehmet
	{Ak{\c s}it}},
  pages = {201--217},
  address = {Boston},
  file = {Douence2005TraceBased.pdf:Douence2005TraceBased.pdf:PDF},
  isbn = {0-321-21976-7}
}

@PHDTHESIS{DragicevicIcon,
  author = {Pierre Dragicevic},
  title = {Un modèle d'interaction en entrée pour des systèmes interactifs multi-dispositifs
	hautement configurables},
  school = {Université de Nantes},
  file = {Dragicevic-memoire.pdf:Dragicevic-memoire.pdf:PDF},
  owner = {gpothier},
  quality = {5},
  relevance = {3},
  timestamp = {2006.02.18}
}

@ARTICLE{Ducasse1994Environments,
  author = {M. Ducass\'{e} and J. Noy\'{e}},
  title = {Logic Programming Environments: Dynamic Program Analysis and Debugging},
  journal = {Journal of Logic Programming},
  year = {1994},
  note = {To be published},
  file = {Ducasse1994Environments.pdf:Ducasse1994Environments.pdf:PDF}
}

@INPROCEEDINGS{Ducasse1999Coca,
  author = {Mireille Ducass{\'e}},
  title = {Coca: an automated debugger for C},
  booktitle = {ICSE '99: Proceedings of the 21st international conference on Software
	engineering},
  year = {1999},
  pages = {504--513},
  address = {Los Alamitos, CA, USA},
  publisher = {IEEE Computer Society Press},
  file = {Ducasse1999Coca.pdf:Ducasse1999Coca.pdf:PDF},
  isbn = {1-58113-074-0},
  location = {Los Angeles, California, United States},
  review = {Coca is a tool for on the fly runtime analysis of C programs.
	
	Traditional line based breakpoints are replaced by semantically significant
	events such as method entry and exit, for loops, etc.
	
	GDB is used as a backend and generates "virtual" trace events (in
	the sense that trace is not stored).
	
	The query language is Prolog with very few high-level predicates that
	permit to control the execution and inspect state.
	
	"Any kind of storage can become a problem with real-size programs"}
}

@ARTICLE{Ducasse1999Opium,
  author = {Mireille Ducass{\'e}},
  title = {Opium: An Extendable Trace Analyzer for Prolog},
  journal = {Journal of Logic Programming},
  year = {1999},
  volume = {39},
  pages = {177--223},
  number = {1-3},
  bibdate = {2003-11-27},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/journals/jlp/jlp39.html#Ducasse99},
  file = {Ducasse1999Opium.pdf:Ducasse1999Opium.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  review = {Opium is an extensible trace analyzer for Prolog. it is able to both
	control the execution of the debugged program (for forward queries)
	and to use a small trace database for backward queries.
	
	The core predicates mimic stepping and conditional breakpoint features
	of traditional debuggers. It is possible to create "debugging programs"
	based on the core predicates. A number of such extensions are presented
	that permit to help the programmer in resolving certain common types
	of bugs (endless loops, unexpected failures...)
	
	The debugger and the debugged program runs in separate process. In
	order to minimize communication between the processes the debugger
	can use pre-filtering predicates that permit to report only relevant
	events (=partial traces)}
}

@INPROCEEDINGS{Dufour2004Measuring,
  author = {Bruno Dufour and Christopher Goard and Laurie Hendren and Oege de
	Moor and Ganesh Sittampalam and Clark Verbrugge},
  title = {Measuring the dynamic behaviour of AspectJ programs},
  booktitle = {OOPSLA '04: Proceedings of the 19th annual ACM SIGPLAN conference
	on Object-oriented programming, systems, languages, and applications},
  year = {2004},
  pages = {150--169},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1028976.1028990},
  file = {Dufour2004Measuring.pdf:Dufour2004Measuring.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {3},
  isbn = {1-58113-831-9},
  location = {Vancouver, BC, Canada},
  review = {The paper presents a framework for the dynamic analysis of AspectJ
	programs, and the results of applying this framework to different
	AspectJ programs.
	
	The goal of the framework is to precisely determine the amount of
	instructions that correspond to weaving overhead versus base code
	and advice instructions. Weaving overhead is further subdivided into
	many categories, allowing to pinpoint the precise cause of overhead.
	The core idea is that each bytecode instruction is tagged by a modified
	AspectJ compiler, so that they are accounted during execution. The
	tags are propagated at runtime, for instance from advice code to
	methods called from advice code.
	
	The benchmarks results show that some ways of using AspectJ cause
	little overhead, while others cause huge overhead. In particular,
	the around call descriptor and cflow construct can cause an important
	overhead.}
}

@INPROCEEDINGS{Eaddy2007Debugging,
  author = {Marc Eaddy and Alfred Aho and Weiping Hu and Paddy McDonald and Julian
	Burger},
  title = {Debugging Aspect-Enabled Programs},
  booktitle = {SC2007: Proceedings of Software Composition 2007},
  year = {2007},
  file = {Eaddy2007Debugging.pdf:Eaddy2007Debugging.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  keywords = {debug-aop},
  owner = {gpothier},
  review = {The authors advocate the need of better debugging facilities for AOP.
	
	They present interesting classifications of weaving strategies, AOP
	
	activities and fault types. Then they present Wicca, an AOP system
	for
	
	C# that focuses on debugging facilities.
	
	Amongst the characteristics they present as desirable for debugging
	
	AOP systems, debugging obliviousness and debugging intimacy are the
	
	most emphasized. Debugging obliviousness refers to the ability to
	
	debug base code without ever stepping into aspect code, while
	
	debugging intimacy refers to the ability to step into aspect code
	(not
	
	only advice code but also the code that implements the AOP semantics
	
	such as aspect selection and additional activities introduced by the
	
	AOP framework).
	
	
	Wicca uses dynamic source weaving, enabling: debugging intimacy,
	
	enabling/disabling/adding/removing aspects at runtime,
	
	edit-and-continue functionality for both base code and aspect code.
	
	
	It is a bit disappointing that not only Wicca does not support debug
	
	obliviousness, but also no hint is given as to how it could be
	
	supported. There is no future work section.},
  timestamp = {2007.05.17}
}

@ARTICLE{EhringEclipse,
  author = {Karsten Ehrig and Claudia Ermel and Stefan Hansgen and Gabriele Taentzer},
  title = {Generation of Visual Editors as Eclipse Plug-Ins},
  abstract = {Visual Languages (VLs) play an important role in software
	
	system development. Especially when looking at well-deﬁned
	
	domains, a broad variety of domain speciﬁc visual languages
	
	are used for the development of new applications. These
	
	languages are typically developed speciﬁcally for a certain
	
	domain in a way that domain concepts occur as primitives
	
	in the language alphabet. Visual modeling environments
	
	are needed to support rapid development of domain-speciﬁc
	
	solutions.
	
	 In this contribution we present a general approach for
	
	deﬁning visual languages and for generating language-speciﬁc
	
	tool environments. The visual language deﬁnition is again
	
	given in a visual manner and precise enough to completely
	
	generate the visual environment. The underlying technol-
	
	ogy is Eclipse with its plug-in capabilities on the one hand,
	
	and formal graph transformation techniques on the other
	
	hand. More precisely, we present an Eclipse plug-in gener-
	
	ating Java code for visual modeling plug-ins which can be
	
	directly executed in the Eclipse Runtime-Workbench.
	
	Categories and Subject Descriptors: D.2.6 [Graphical
	
	environments]: Eclipse, F.4.3 [Algebraic language theory].
	
	General Terms: Design, Languages, Theory.
	
	Keywords: Eclipse, generation, graph transformation,
	
	visual editor plug-in.},
  file = {EhringEclipse.pdf:EhringEclipse.pdf:PDF},
  gp_quality = {5},
  gp_rel_lang = {5},
  owner = {gpothier},
  quality = {5},
  relevance = {L5},
  review = {Presentation of a system that permits to:
	
	- Specify visual languages by means of a visual alphabet (symbols
	and layout information) and a graph grammar comprised of a set of
	transformation rules (Left-Hand Side and Right-Hand Side graphs,
	being the initial and final steps of the transformation, and optional
	Negative Application Conditions that restrict the availablility of
	the rules)
	
	- Generate an editor that permits to create visual programs corresponding
	to a given specification. The generated editor is an Eclipse plugin
	using based on GEF
	
	
	The graph transformation system seems powerful, however I doubt that
	the generated editors are easy to use due to the syntax-directed
	editing paradigm, ie. the visual program needs always be in a consistent
	state. They recognize that a free-hand editor would simplify the
	process by offering "more general symbol editing commands".
	
	
	No words on how the visual program is used after it is created.},
  timestamp = {2006.02.25}
}

@ARTICLE{Eisenstadt1997Stories,
  author = {Marc Eisenstadt},
  title = {My hairiest bug war stories},
  journal = {Commun. ACM},
  year = {1997},
  volume = {40},
  pages = {30--37},
  number = {4},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/248448.248456},
  file = {Eisenstadt1997Stories.pdf:Eisenstadt1997Stories.pdf:PDF},
  gp_quality = {!},
  gp_rel_debug = {5},
  issn = {0001-0782},
  publisher = {ACM Press},
  review = {Not read entirely yet.
	
	Deals with how bugs are discovered.}
}

@ARTICLE{Elias1974Efficient,
  author = {Elias, Peter},
  title = {Efficient Storage and Retrieval by Content and Address of Static
	Files},
  journal = {J. ACM},
  year = {1974},
  volume = {21},
  pages = {246--260},
  number = {2},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/321812.321820},
  file = {Elias1974Efficient.pdf:Elias1974Efficient.pdf:PDF},
  issn = {0004-5411},
  publisher = {ACM}
}

@INPROCEEDINGS{Ernst2003Synergy,
  author = {Michael D. Ernst},
  title = {Static and dynamic analysis: Synergy and duality},
  booktitle = {WODA 2003: ICSE Workshop on Dynamic Analysis, Portland, OR},
  year = {2003},
  pages = {24--27},
  month = may,
  gp_rel_debug = {4},
  gp_rel_lang = {5}
}

@INPROCEEDINGS{Feldman1988IGOR,
  author = {Stuart I. Feldman and Channing B. Brown},
  title = {IGOR: a system for program debugging via reversible execution},
  booktitle = {PADD '88: Proceedings of the 1988 ACM SIGPLAN and SIGOPS workshop
	on Parallel and distributed debugging},
  year = {1988},
  pages = {112--123},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/68210.69226},
  file = {Feldman1988IGOR.pdf:Feldman1988IGOR.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  isbn = {0-89791-296-9},
  location = {Madison, Wisconsin, United States},
  review = {Igor is a system for reversible program execution based on checkpointing
	and interpreting for reexecution. Some facilities are provided for
	exploring the value history of variables. The system also permits
	to load modified code into the system after a restart.}
}

@MASTERSTHESIS{Fierz2009Compass,
  author = {Julien Fierz},
  title = {Compass: Flow-Centric Back-In-Time Debugging},
  school = {University of Bern},
  year = {2009},
  type = {Master's Thesis},
  month = jan,
  abstract = {Debugging object-oriented programs often is a difficult and time-consuming
	task. Nearly all of today's debuggers only show the current state
	of a failing program. The user can see when the state is corrupted,
	but usually the root cause that leads to that state occurs long before
	that. Back-in-time debuggers address this problem by recording the
	execution history of a program run and presenting it to the user
	for inspection of past states. Those debuggers have proven useful
	as they help the developer to solve difficult problems better than
	a standard debugger. However, most of those tools do not provide
	sophisticated techniques to explore the collected dynamic data, which
	can make it hard to track down the root cause of an error in large
	program executions. The approaches are state-centric, which means
	they provide the past state at different points in time, but they
	provide no information on how objects were passed around in the system.
	To address this problem we provide a flow-centric approach that focuses
	on the reference transfers of objects. We present a new back-in-time
	debugger user interface that provides more efficient exploration
	of the execution history. The debugger has views and functionality
	that help the developer understand the failing system and let him
	explore how objects were passed around. Our initial case studies
	show that it is possible to find complex bugs more efficiently than
	with existing approaches.},
  file = {Fierz2009Compass.pdf:Fierz2009Compass.pdf:PDF},
  gp_rel_debug = {!!!},
  keywords = {scg-msc evolution visualization scg-pub jb09 object-flow},
  url = {http://www.iam.unibe.ch/~scg/Archive/Diploma/Fier09a.pdf}
}

@INPROCEEDINGS{Fischer2005Evolution,
  author = {Michael Fischer and Johann Oberleitner and Harald Gall and Thomas
	Gschwind},
  title = {System Evolution Tracking through Execution Trace Analysis},
  booktitle = {IWPC '05: Proceedings of the 13th International Workshop on Program
	Comprehension},
  year = {2005},
  pages = {237--246},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://dx.doi.org/10.1109/WPC.2005.35},
  file = {fischer_iwpc05.pdf:fischer_iwpc05.pdf:PDF},
  isbn = {0-7695-2254-8}
}

@INPROCEEDINGS{Gabriel2006Conscientious,
  author = {Richard P. Gabriel and Ron Goldman},
  title = {Conscientious software},
  booktitle = {OOPSLA '06: Proceedings of the 21st annual ACM SIGPLAN conference
	on Object-oriented programming languages, systems, and applications},
  year = {2006},
  pages = {433--450},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1167473.1167510},
  file = {Gabriel2006Conscientious.pdf:Gabriel2006Conscientious.pdf:PDF},
  isbn = {1-59593-348-4},
  location = {Portland, Oregon, USA}
}

@INPROCEEDINGS{Gestwicki2005Jive,
  author = {Paul Gestwicki and Bharat Jayaraman},
  title = {Methodology and architecture of {JIVE}},
  booktitle = {SoftVis '05: Proceedings of the 2005 ACM symposium on Software visualization},
  year = {2005},
  pages = {95--104},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1056018.1056032},
  file = {Gestwicki2005Jive.pdf:Gestwicki2005Jive.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  isbn = {1-59593-073-6},
  location = {St. Louis, Missouri},
  review = {Jive is a system that provides interactive visualization about the
	execution of Java programs. Notably, it provides object graphs and
	sequence diagrams (referred to as contours, although the concept
	doesn't seem very useful).
	
	The object diagrams not only show the relationships between objects
	but also show outstanding method calls.
	
	It is possible to step backwards in the execution trace, at some (predefined?)
	granularity level.
	
	A good part of the paper deal with "theoretical" details of the graphs,
	which are not really interesting given that they closely follow the
	semantics of Java.
	
	The trace is captured through JPDA (runtime overhead must be significant).
	
	Trace database is in-memory. Not benchmarks.}
}

@INPROCEEDINGS{GibbonsFission,
  author = {Jeremy Gibbons},
  title = {Fission for Program Comprehension},
  file = {fission.pdf:to_read/fission.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Girgis2005Visualizing,
  author = {Hani Z. Girgis and Bharat Jayaraman and Paul V. Gestwicki},
  title = {Visualizing errors in object oriented programs},
  booktitle = {OOPSLA '05: Companion to the 20th annual ACM SIGPLAN conference on
	Object-oriented programming, systems, languages, and applications},
  year = {2005},
  pages = {156--157},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1094855.1094911},
  file = {Girgis2005Visualizing.pdf:Girgis2005Visualizing.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  isbn = {1-59593-193-7},
  location = {San Diego, CA, USA},
  review = {Short paper (2 pages)
	
	Interesting refs.
	
	
	The aim is to show that visual representation of a program execution
	(of structure, or cflow) can help detect if the program has bugs.
	
	A database of erroneous vs. fixed programs has been created.
	
	Based on jive}
}

@INPROCEEDINGS{Gleicher1992Constraints,
  author = {Michael Gleicher},
  title = {Integrating Constraints and Direct Manipulation.},
  booktitle = {SI3D},
  year = {1992},
  pages = {171-174},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://doi.acm.org/10.1145/147156.147194},
  file = {GleicherConstraints.pdf:GleicherConstraints.pdf:PDF}
}

@INPROCEEDINGS{Goldsmith2005Relational,
  author = {Simon Goldsmith and Robert O'Callahan and Alex Aiken},
  title = {Relational queries over program traces},
  booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference
	on Object oriented programming, systems, languages, and applications},
  year = {2005},
  pages = {385--402},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1094811.1094841},
  file = {Goldsmith2005Relational.pdf:Goldsmith2005Relational.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-59593-031-0},
  location = {San Diego, CA, USA}
}

@MISC{TimeMachineWeb,
  author = {{Green Hills Software}},
  title = {{TimeMachine} debugger for embedded systems},
  howpublished = {http://www.ghs.com/products/timemachine.html},
  gp_quality = {5},
  gp_rel_debug = {5},
  owner = {gpothier},
  review = {A trace collection and analysis system.
	
	Low-level (microprocessor trace port), relatively high throughput,
	up to 1GB trace.
	
	Backward/Forward stepping
	
	Profiling},
  timestamp = {2006.10.05}
}

@INPROCEEDINGS{HackstadtPerformance,
  author = {Steven T. Hackstadt and Allen D. Malony and Bernd Mohr},
  title = {Scalable Performance Visualization for Data-Paralell Programs},
  file = {scalable performance visualization.ps.gz:to_read/scalable performance visualization.ps.gz:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Hamou-Lhadj2004Survey,
  author = {Hamou-Lhadj, Abdelwahab and Lethbridge, Timothy C.},
  title = {A survey of trace exploration tools and techniques},
  booktitle = {CASCON '04: Proceedings of the 2004 conference of the Centre for
	Advanced Studies on Collaborative research},
  year = {2004},
  pages = {42--55},
  publisher = {IBM Press},
  file = {Hamou-Lhadj2004Survey.pdf:Hamou-Lhadj2004Survey.pdf:PDF},
  gp_rel_debug = {!!!},
  location = {Markham, Ontario, Canada}
}

@INPROCEEDINGS{Lhadj2002Compression,
  author = {Abdelwahab Hamou-Lhadj and Timothy C. Lethbridge},
  title = {Compression Techniques to Simplify the Analysis of Large Execution
	Traces},
  booktitle = {IWPC '02: Proceedings of the 10th International Workshop on Program
	Comprehension},
  year = {2002},
  pages = {159},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  file = {Lhadj2002Compression.pdf:Lhadj2002Compression.pdf:PDF},
  gp_quality = {2},
  gp_rel_debug = {5},
  isbn = {0-7695-1495-2},
  issn = {1092-8138},
  review = {The paper presents an algorithm for compressing procedure call traces.
	
	Redundant sequences are detected and only a stub remains. Compression
	is lossless, but timing information is not included, and neither
	is memory accesses.
	
	They claim that the resulting trace is understandable by humans, but
	the claim is not backed.
	
	Compression ratios of 1:10 are achieved.}
}

@ARTICLE{Harinarayan1996Cube,
  author = {Venky Harinarayan and Anand Rajaraman and Jeffrey D. Ullman},
  title = {Implementing data cubes efficiently},
  journal = {SIGMOD Rec.},
  year = {1996},
  volume = {25},
  pages = {205--216},
  number = {2},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/235968.233333},
  file = {Harinarayan1996Cube.pdf:Harinarayan1996Cube.pdf:PDF},
  issn = {0163-5808},
  publisher = {ACM Press}
}

@MISC{Haupt2006Demo,
  author = {Michael Haupt and Christoph Bockisch and Stephan Ritzkowski},
  title = {Dynamic Slicing for {AOP}},
  howpublished = {Demo at AOSD.06: Fifth International Conference on Aspect-Oriented
	Software Development},
  year = {2006},
  abstract = {During debugging, interest usually is in events that have led to an
	erroneous situation. Only part of the corresponding control flow
	can be derived from the call stack: the history of execution, and
	the way it was influenced by conditions based on expression results,
	are not accessible. In aspect-oriented programs, advice executions
	have influence on the control flow and state of the application.
	The call stack alone is not sufficient to give a comprehensive view
	on the causes of an error.
	
	
	The presented tool suite uses program slicing to select the interesting
	part of an execution. Slicing in this approach is based on a complete
	trace of a program run generated by a modified virtual machine. The
	entire trace can be browsed using controls similar to a conventional
	debugger. Slicing allows for selecting particular expressions in
	the program and marking all statements that have influenced the value
	of the expression, or that will be influenced by the value.
	
	
	The tool is integrated into the Eclipse JDT. Slices are presented
	to the user in the Java editor by highlighting the affected statements.
	Since slices typically affect different modules, they are presented
	as bookmarks, allowing for navigation over multiple files.},
  gp_rel_debug = {5},
  owner = {gpothier},
  timestamp = {2007.09.12}
}

@ARTICLE{Hennessy1982Symbolic,
  author = {John Hennessy},
  title = {Symbolic Debugging of Optimized Code},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {1982},
  volume = {4},
  pages = {323--344},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/357172.357173},
  file = {Hennessy1982Symbolic.pdf:Hennessy1982Symbolic.pdf:PDF},
  gp_rel_debug = {3},
  issn = {0164-0925},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Hill1983Microprocessor,
  author = {Charles R. Hill},
  title = {A real-time microprocessor debugging technique},
  booktitle = {SIGSOFT '83: Proceedings of the symposium on High-level debugging},
  year = {1983},
  pages = {145--148},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1006147.1006179},
  file = {Hill1983Microprocessor.pdf:Hill1983Microprocessor.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  isbn = {0-89791-111-3},
  location = {Pacific Grove, California},
  review = {The paper describes a work in progress.
	
	Concepts of software and hardware probes that produce an event whenever
	the processor starts to execute a "basic block", which is a sequence
	of instruction that has unique entry and exit points (no jumps to/from
	outside code inside the block).
	
	The problem of trace volume is mentioned but no really adressed.
	
	The problem of runtime overhead is mentioned and the hardware probe
	is presented as a solution.}
}

@INPROCEEDINGS{Hofer2006Debugger,
  author = {Christoph Hofer and Marcus Denker and St\'ephane Ducasse},
  title = {Design and Implementation of a Backward-In-Time Debugger},
  booktitle = {Proceedings of NODE'06},
  year = {2006},
  volume = {P-88},
  series = {Lecture Notes in Informatics},
  pages = {17--32},
  month = sep,
  organization = {Gesellschaft f{\"u}r Informatik (GI)},
  abstract = {Traditional debugging and stepping execution trace are well-accepted
	techniques to understand deep internals about a program. However
	in many cases navigating the stack trace is not enough to find bugs,
	since the cause of a bug is often not in the stack trace anymore
	and old state is lost, so out of reach from the debugger. In this
	paper, we present the design and implementation of a backward-in-time
	debugger for a dynamic language, i.e, a debugger that allows one
	to navigate back the history of the application. We present the design
	and implementation of a backward-in-time debugger called Unstuck
	and show our solution to key implementation challenges.},
  aeres = {ACT},
  aeresstatus = {aeres08},
  annote = {internationalconference},
  file = {Hofe06aUnstuckNode.pdf:Hofe06aUnstuckNode.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  inria = {hors},
  keywords = {skipdoi scg-pub stefPub jb07 fb06 snf06},
  peer = {yes},
  quality = {Q3},
  relevance = {D5},
  review = {The paper presents Unstuck, a back-in-time debugger for Squeak.
	
	Very similar to Bil Lewis' ODB, the paper does not make clear the
	contribution.
	
	Not instrumented objects are snapshot, as well as collections.
	
	Events are stored in the process memory.
	
	No support for multiple threads.
	
	Navigation is very similar to ODB.
	
	A few benchmarks are provided, show poor behavior with about 400.000
	events.},
  selectif = {non},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Hofe06aUnstuckNode.pdf}
}

@ARTICLE{Hood2000Debugger,
  author = {Robert Hood and Gabriele Jost},
  title = {A Debugger for Computational Grid Applications},
  journal = {hcw},
  year = {2000},
  volume = {00},
  pages = {262},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/HCW.2000.843750},
  file = {HoodDebuggerGrid.pdf:HoodDebuggerGrid.pdf:PDF},
  gp_rel_debug = {4},
  issn = {1097-5209},
  publisher = {IEEE Computer Society}
}

@MASTERSTHESIS{Lewis2001Thesis,
  author = {Steven Allen Lewis II},
  title = {TECHNIQUES FOR EFFICIENTLY RECORDING STATE CHANGES OF A COMPUTER
	ENVIRONMENT TO SUPPORT REVERSIBLE DEBUGGING},
  school = {UNIVERSITY OF FLORIDA},
  year = {2001},
  file = {lewis01techniques.pdf:tod/lewis01techniques.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Ishio2004Debugging,
  author = {Takashi Ishio and Shinji Kusumoto and Katsuro Inoue},
  title = {Debugging Support for Aspect-Oriented Program Based on Program Slicing
	and Call Graph},
  booktitle = {ICSM '04: Proceedings of the 20th IEEE International Conference on
	Software Maintenance},
  year = {2004},
  pages = {178--187},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  file = {Ishio2004Debugging.pdf:Ishio2004Debugging.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  isbn = {0-7695-2213-0},
  review = {The paper describes extensions of call graph, data dependency graph,
	control dependency graph and slicing for AOP
	
	For call graphs, possible advice invocations are considered as an
	edge.
	
	For data dependency graphs, access to joinpoint information (getargs)
	are considered as an edge to all formal parameters, as the actual
	accessed parameter is not known at compile time.
	
	The paper also provides very unconclusive experimental results on
	the usefulness of slices in the debugging of programs
	
	Overall the paper is not very interesting.}
}

@ARTICLE{Jerding1998Mural,
  author = {Dean F. Jerding and John T. Stasko},
  title = {The Information Mural: A Technique for Displaying and Navigating
	Large Information Spaces.},
  journal = {IEEE Trans. Vis. Comput. Graph.},
  year = {1998},
  volume = {4},
  pages = {257-271},
  number = {3},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://www.computer.org/tvcg/tg1998/v0257abs.htm},
  file = {jerding95information.pdf:jerding95information.pdf:PDF}
}

@INPROCEEDINGS{KastensEli,
  author = {Uwe Kastens and Carsten Schmidt},
  title = {VL-Eli: A Generator for Visual Languages},
  file = {vl-eli.pdf:to_read/vl-eli.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@ARTICLE{Katz1989Strategies,
  author = {Irvin R. Katz and John R. Anderson},
  title = {Debugging: An Analysis of Bug-Location Strategies (Abstract Only)},
  journal = {SIGCHI Bull.},
  year = {1989},
  volume = {21},
  pages = {123},
  number = {1},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/67880.1046598},
  file = {Katz1989Strategies.pdf:Katz1989Strategies.pdf:PDF},
  gp_quality = {?},
  gp_rel_debug = {5},
  issn = {0736-6906},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Kiczales1997AOP,
  author = {Gregor Kiczales and John Lamping and Anurag Mendhekar and Chris Maeda
	and Cristina Videira Lopes and Jean-Marc Loingtier and John Irwin},
  title = {Aspect-Oriented Programming},
  booktitle = {ECOOP},
  year = {1997},
  pages = {220-242},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://link.springer.de/link/service/series/0558/bibs/1241/12410220.htm},
  gp_rel_debug = {!}
}

@INPROCEEDINGS{Ko2008JavaWhyline,
  author = {Andrew J. Ko and Brad A. Myers},
  title = {Debugging Reinvented: Asking and Answering Why and Why Not Questions
	about Program Behavior},
  booktitle = {ICSE 2008: Proceedings of the International Conference on Software
	Engineering},
  year = {2008},
  pages = {301--310},
  file = {Ko2008JavaWhyline.pdf:Ko2008JavaWhyline.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  owner = {gpothier},
  review = {The tool captures an execution trace and lets the user choose amongst
	a set of "why did" and "why didn't" questions.
	
	The questions are generated using a combination of static and dynamic
	analysis.
	
	The questions can be directed to graphical or textual output.
	
	
	Interesting notion of familiarity: classes or fields directly (or
	almost directly) manipulated by the programmer.
	
	
	Trace is recorded on disk and later loaded by the frontend.
	
	Runtime overhead is quite low (15x), but is it worst case?},
  timestamp = {2008.05.20}
}

@INPROCEEDINGS{Korn1998Traversal,
  author = {Jeffrey L. Korn and Andrew W. Appel},
  title = {Traversal-based Visualization of Data Structures},
  year = {1998},
  file = {Korn1998Traversal.pdf:Korn1998Traversal.pdf:PDF},
  gp_rel_debug = {5},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Kranzlmuller1996Debugging,
  author = {Dieter Kranzlm{\"u}ller and Siegfried Grabner and Jens Volkert},
  title = {Event graph visualization for debugging large applications},
  booktitle = {SPDT '96: Proceedings of the SIGMETRICS Symposium on Parallel and
	Distributed Tools},
  year = {1996},
  pages = {108--117},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/238020.238054},
  file = {Kranzlmuller1996Debugging.pdf:Kranzlmuller1996Debugging.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {4},
  isbn = {0-89791-846-0},
  location = {Philadelphia, Pennsylvania, United States},
  review = {The article presents the ATEMPT tool for visualizing and debugging
	distributed (SMP) applications. The tool integrates into a larger
	system named MAD, that provides amongst other things the monitoring
	system that feed events into ATEMPT, the latter dealing exclusively
	with the visualization.
	
	The main contribution of the paper is a description of the different
	tools available in ATEMPT to help the user in finding the points
	of interest. The basic view is a "space-time display" where communication
	events are represented in a graph where the horizontal axis represents
	time and the vertical axis represent the different processes. The
	tools are:
	
	- error detection: detection of isolated send or receive events, and
	event size mismatches.
	
	- detection of race conditions: potiential race conditions (events
	that occur at the same time) are highlighted and the user is allowed
	to rearrange the event sequence and replay the application with the
	new arrangement; if the program fails with the new arrangement, a
	race condition exists.
	
	- usage of cuts: cuts are checkpoints at which execution can be restarted
	and program state inspected.
	
	- performance analysis: the blocking time of communication events
	is displayed, allowing to pinpoint bottlenecks
	
	- horizontal reductions: a few communication patters can be recognized
	and displayed in a more compact form
	
	- vertical reductions: processes can be hidden of grouped}
}

@INPROCEEDINGS{Kunz1997Patterns,
  author = {Thomas Kunz and Michiel F. H. Seuren},
  title = {Fast detection of communication patterns in distributed executions},
  booktitle = {CASCON '97: Proceedings of the 1997 conference of the Centre for
	Advanced Studies on Collaborative research},
  year = {1997},
  pages = {12},
  publisher = {IBM Press},
  file = {Kunz1997Patterns.pdf:Kunz1997Patterns.pdf:PDF},
  gp_rel_debug = {!},
  location = {Toronto, Ontario, Canada}
}

@INPROCEEDINGS{Lonnberg2004MVT,
  author = {Jan L\"{o}nnberg and Ari Korhonen and Lauri Malmi},
  title = {MVT: a system for visual testing of software},
  booktitle = {AVI '04: Proceedings of the working conference on Advanced visual
	interfaces},
  year = {2004},
  pages = {385--388},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/989863.989931},
  file = {Lonnberg2004MVT.pdf:Lonnberg2004MVT.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-58113-867-9},
  location = {Gallipoli, Italy},
  review = {Matrix}
}

@INPROCEEDINGS{Langevine2005Tracer,
  author = {Ludovic Langevine and Mireille Ducass\&\#233;},
  title = {A tracer driver for hybrid execution analyses},
  booktitle = {AADEBUG'05: Proceedings of the sixth international symposium on Automated
	analysis-driven debugging},
  year = {2005},
  pages = {143--148},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1085130.1085149},
  file = {Langevine2005Tracer.pdf:Langevine2005Tracer.pdf:PDF},
  gp_rel_debug = {5},
  isbn = {1-59593-050-7},
  location = {Monterey, California, USA}
}

@INPROCEEDINGS{Larus1999Whole,
  author = {James R. Larus},
  title = {Whole program paths},
  booktitle = {PLDI '99: Proceedings of the ACM SIGPLAN 1999 conference on Programming
	language design and implementation},
  year = {1999},
  pages = {259--269},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/301618.301678},
  file = {Larus1999Whole.pdf:Larus1999Whole.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-58113-094-5},
  location = {Atlanta, Georgia, United States}
}

@INPROCEEDINGS{Leavenworth1976Incremental,
  author = {B. M. Leavenworth},
  title = {Incremental program testing in a very high level language},
  booktitle = {ACM 76: Proceedings of the annual conference},
  year = {1976},
  pages = {499--503},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/800191.805650},
  file = {Leavenworth1976Incremental.pdf:Leavenworth1976Incremental.pdf:PDF},
  gp_rel_debug = {5},
  location = {Houston, Texas, United States}
}

@INPROCEEDINGS{LeDoux1985Ada,
  author = {Carol H. LeDoux and D. Stott {Parker, Jr.}},
  title = {Saving Traces for Ada Debugging},
  booktitle = {Ada in Use, Proceedings of the Ada International
	
	 Conference},
  year = {1985},
  pages = {97--108},
  month = sep,
  note = {Published as ACM Ada Letters, volume 5, number 2},
  file = {p97-ledoux-1.pdf:p97-ledoux-1.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  keywords = {par-debugging bib,},
  quality = {3},
  relevance = {D5},
  review = {The paper presents a trace based debugger for ADA, and particularly
	for concurrent programs.
	
	Instrumentation is performed at the source level.
	
	Events are stored as prolog clauses, and queries are expressed in
	prolog.
	
	Very few example of queries, poor argumentation of why prolog is better
	than relational, superficial description of the implementation.
	
	No benchmarks.}
}

@INPROCEEDINGS{Lewis2003Debugging,
  author = {Bil Lewis},
  title = {Debugging Backwards in Time},
  booktitle = {Proceedings of the Fifth International Workshop on Automated Debugging
	(AADEBUG 2003)},
  year = {2003},
  editor = {M. Ronsse and K. De Bosschere},
  volume = {cs.SE/0310016},
  address = {Ghent, Belgium},
  file = {Lewis2003Debugging.pdf:Lewis2003Debugging.pdf:PDF},
  gp_rel_debug = {5},
  journal = {CoRR},
  keywords = {debugging},
  owner = {gpothier},
  quality = {5},
  relevance = {5},
  review = {Description of the omniscient debugger
	
	Interesting examples and categorizations of bugs},
  timestamp = {2006.02.18}
}

@MISC{LewisRecording,
  author = {Bil Lewis},
  title = {Recording Events to Analyze Programs},
  file = {LewisASARTI03.pdf:tod/LewisASARTI03.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Lhotak2004Integrating,
  author = {Jennifer Lhot\'ak and Ond\v{r}ej Lhot\'ak and Laurie Hendren},
  title = {Integrating the {Soot} compiler infrastructure into an {IDE}},
  booktitle = {Compiler Construction, 13th International Conference},
  year = {2004},
  editor = {E. Duesterwald},
  volume = {2985},
  series = {LNCS},
  pages = {281--297},
  address = {Barcelona, Spain},
  month = {April},
  publisher = {Springer},
  file = {Lhotak2004Integrating.pdf:Lhotak2004Integrating.pdf:PDF},
  gp_rel_debug = {!},
  review = {The paper presents an Eclipse plugin that permits to display the results
	of progam analysis to the user. Tha analyses themselves are performed
	by Soot, and the permits to diplay specific tags attached by the
	analyzer to each program statement. There are three kinds of displayable
	tags: text label, color and link. They were created to be generic
	enough to be useful for a wide spectrum of analyses. The correspondance
	between original Java source statements and Intermediate Representation
	(IR) artifacts is maintained, with a line-level precision if only
	the bytecode is available, and a token-level precision if the source
	code is available.
	
	Several example analyses are also presented.}
}

@INPROCEEDINGS{Lhotak2004Jedd,
  author = {Ond\v{r}ej Lhot\'ak and Laurie Hendren},
  title = {Jedd: A {BDD}-based Relational Extension of {Java}},
  booktitle = {Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language
	Design and Implementation},
  year = {2004},
  publisher = {ACM Press},
  file = {Lhotak2004Jedd.pdf:Lhotak2004Jedd.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-58113-807-5},
  location = {Washington, D.C., USA}
}

@INPROCEEDINGS{Liang2005Behavior,
  author = {Donglin Liang and Kai Xu},
  title = {Debugging object-oriented programs with behavior views},
  booktitle = {AADEBUG'05: Proceedings of the sixth international symposium on Automated
	analysis-driven debugging},
  year = {2005},
  pages = {133--142},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1085130.1085148},
  file = {Liang2005Behavior.pdf:Liang2005Behavior.pdf:PDF},
  gp_rel_debug = {5},
  isbn = {1-59593-050-7},
  location = {Monterey, California, USA}
}

@INPROCEEDINGS{Liblit2003Isolation,
  author = {Ben Liblit and Alex Aiken and Alice X. Zheng and Michael I. Jordan},
  title = {Bug isolation via remote program sampling},
  booktitle = {PLDI '03: Proceedings of the ACM SIGPLAN 2003 conference on Programming
	language design and implementation},
  year = {2003},
  pages = {141--154},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/781131.781148},
  file = {Liblit2003Isolation.pdf:Liblit2003Isolation.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-58113-662-5},
  location = {San Diego, California, USA}
}

@INPROCEEDINGS{Lieberman1984Steps,
  author = {Henry Lieberman},
  title = {Steps toward better debugging tools for LISP},
  booktitle = {LFP '84: Proceedings of the 1984 ACM Symposium on LISP and functional
	programming},
  year = {1984},
  pages = {247--255},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/800055.802041},
  file = {Lieberman1984Steps.pdf:Lieberman1984Steps.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  isbn = {0-89791-142-3},
  location = {Austin, Texas, United States},
  review = {First ZStep paper
	
	ZStep is a stepper for Lisp featuring 3 major innovations:
	
	- Double source code view. The first view shows the original source
	code, while in the secondary view, expressions that have been evaluated
	are remplaced by their value. Visual indications permit to relate
	the currently evaluating expression between both views.
	
	- Possibility to back up: if the user realizes he stepped over some
	important expression, he has the option to restart its evaluation
	and step into it.
	
	- Error objects: errors are reified into an inspectionable object
	instead of completely interrupting the program.
	
	
	Some simple usage examples are provided (too many "screenshots" in
	my opinion)}
}

@INPROCEEDINGS{Lieberman1998ZStep,
  author = {Henry Lieberman and Christoper Fry},
  title = {{ZS}tep 95: {A} reversible, animated source code
	
	 stepper},
  booktitle = {Software Visualization --- Programming as a Multimedia
	
	 Experience},
  year = {1998},
  editor = {John Stasko and John Domingue and Marc H. Brown and
	
	 Blaine A. Price},
  pages = {277--292},
  address = {Cambridge, MA-London},
  publisher = {The MIT Press},
  file = {Lieberman1998ZStep.pdf:Lieberman1998ZStep.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  review = {ZStep95 is an evolution of ZStep. It provides reversible stepping
	for Lisp and adds the following improvements on ZStep:
	
	- Friendlier user interface.
	
	 * Instead of having two code windows (one for original program text,
	another with the value of evaluated expressions), a single window
	is used, adding a floating window to indicate the value of evaluated
	expressions
	
	 * Easy to use, tape recorder-like controls instead of menus
	
	
	- Explicit handling of graphical output. It is possible to relate
	a particular graphical element to the expression that created it.
	When running the program backwards, graphical elements elements are
	updated accordingly. Possibility to step to next (or previous) graphical
	activity.
	
	
	Drawbacks:
	
	- Not scalable
	
	- No causal links}
}

@INPROCEEDINGS{Lieberman1995Bridging,
  author = {Henry Lieberman and Christopher Fry},
  title = {Bridging the gulf between code and behavior in programming},
  booktitle = {CHI '95: Proceedings of the SIGCHI conference on Human factors in
	computing systems},
  year = {1995},
  pages = {480--486},
  address = {New York, NY, USA},
  publisher = {ACM Press/Addison-Wesley Publishing Co.},
  doi = {http://doi.acm.org/10.1145/223904.223969},
  file = {Lieberman1995Bridging.pdf:Lieberman1995Bridging.pdf:PDF},
  gp_quality = {!},
  gp_rel_debug = {5},
  isbn = {0-201-84705-1},
  location = {Denver, Colorado, United States}
}

@INPROCEEDINGS{Lienhard2009FlowCentric,
  author = {Adrian Lienhard and Julien Fierz and Oscar Nierstrasz},
  title = {Flow-Centric, Back-In-Time Debugging},
  booktitle = {Objects, Components, Models and Patterns, Proceedings of TOOLS Europe
	2009},
  year = {2009},
  volume = {33},
  series = {LNBIP},
  pages = {272--288},
  publisher = {Springer-Verlag},
  abstract = {Conventional debugging tools present developers with means to explorethe
	run-time context in which an error has occurred. In many cases this
	is enough to help the developer discover the faulty source code and
	correct it. However, rather often errors occur due to code that has
	executed in the past, leaving certain objects in an inconsistent
	state. The actual run-time error only occurs when these inconsistent
	objects are used later in the program. So-called \emph{back-in-time}
	debuggers help developers step back through earlier states of the
	program and explore execution contexts not available to conventional
	debuggers. Nevertheless, even back-in-time debuggers do not help
	answer the question, \emph{``Where did this object come from?''}
	The Object-Flow Virtual Machine, which we have proposed in previous
	work, tracks the flow of objects to answer precisely such questions,
	but this VM does not provide dedicated debugging support to explore
	faulty programs. In this paper we present a novel debugger, called
	Compass, to navigate between conventional run-time stack-oriented
	control flow views and object flows. Compass enables a developer
	to effectively navigate from an object contributing to an error back-in-time
	through all the code that has touched the object. We present the
	design and implementation of Compass, and we demonstrate how \emph{flow-centric,
	back-in-time debugging} can be used to effectively locate the source
	of hard-to-find bugs.},
  annote = {internationalconference},
  doi = {10.1007/978-3-642-02571-6_16},
  file = {Lienhard2009FlowCentric.pdf:Lienhard2009FlowCentric.pdf:PDF},
  gp_rel_debug = {!!!},
  keywords = {scg09 scg-pub jb09 snf09},
  url = {http://scg.unibe.ch/archive/papers/Lien09aCompass.pdf}
}

@INPROCEEDINGS{Lienhard2008Practical,
  author = {Adrian Lienhard and Tudor G{\^i}rba and Oscar Nierstrasz},
  title = {Practical Object-Oriented Back-in-Time Debugging},
  booktitle = {ECOOP},
  year = {2008},
  editor = {Jan Vitek},
  volume = {5142},
  series = {Lecture Notes in Computer Science},
  pages = {592--615},
  publisher = {Springer},
  bibdate = {2008-07-14},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/ecoop/ecoop2008.html#LienhardGN08},
  file = {Lienhard2008Practical.pdf:Lienhard2008Practical.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {978-3-540-70591-8},
  owner = {gpothier},
  url = {http://dx.doi.org/10.1007/978-3-540-70592-5_25}
}

@PHDTHESIS{Loennberg2003Testing,
  author = {Jan Lönnberg},
  title = {Visual testing of software},
  school = {Helsinki University of Technology},
  year = {2003},
  file = {Thesis-Lonnberg-VisualTesting.pdf:to_read/Thesis-Lonnberg-VisualTesting.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{MacLarty2005Mercury,
  author = {Ian MacLarty and Zoltan Somogyi and Mark Brown},
  title = {Divide-and-query and subterm dependency tracking in the mercury declarative
	debugger},
  booktitle = {AADEBUG'05: Proceedings of the sixth international symposium on Automated
	analysis-driven debugging},
  year = {2005},
  pages = {59--68},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1085130.1085138},
  file = {MacLarty2005Mercury.pdf:MacLarty2005Mercury.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {1-59593-050-7},
  location = {Monterey, California, USA},
  review = {The authors describe a trace-based debugger for Mercury, a logic programming
	language.
	
	Partial traces are captured so as to reduce their size: only events
	up to a certain call depth are captured. If more details are needed
	parts of the program are automatically reexecuted.
	
	The debugger works by asking the programmer questions about the correctness
	of the execution of some predicates. "Divide and query" and "subterm
	dependency tracking" are two techniques that permit to reduce the
	number of questions to ask to the user.}
}

@INPROCEEDINGS{Marceau2006Dataflow,
  author = {Guillaume Marceau and Gregory H. Cooper and Jonathan P. Spiro and
	Shriram Krishnamurthi and Steven P. Reiss},
  title = {The Design and Implementation of a Dataﬂow Language for Scriptable
	Debugging},
  year = {2006},
  file = {scriptable_debugging.pdf:to_read/scriptable_debugging.pdf:PDF},
  gp_rel_debug = {!},
  keywords = {debugging},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Marin2007AJHotDraw,
  author = {M. Marin and L. Moonen and A. van Deursen},
  title = {An Integrated Crosscutting Concern Migration Strategy and its Application
	to {JH}otDraw},
  booktitle = {Proceedings Seventh International Working Conference on Source Code
	Analysis and Manipulation (SCAM)},
  year = {2007},
  editor = {Bogdan Korel and Michael W. Godfrey},
  pages = {101--110},
  publisher = {IEEE Computer Society},
  acceptance = {26%},
  file = {Marin2007AJHotDraw.pdf:Marin2007AJHotDraw.pdf:PDF},
  gp_rel_lang = {5},
  group = {SE},
  isbn = {ISBN 0-7695-3034-6},
  project = {AMR},
  topic = {Aspect Mining and Refactoring},
  url = {http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2007-019.pdf}
}

@ARTICLE{Martin2005PQL,
  author = {Michael Martin and Benjamin Livshits and Monica S.
	
	 Lam},
  title = {Finding application errors and security flaws using
	
	 {PQL}: a program query language},
  journal = {ACM SIG{\-}PLAN Notices},
  year = {2005},
  volume = {40},
  pages = {365--383},
  number = {10},
  month = oct,
  acknowledgement = {Nelson H. F. Beebe, University of Utah, Department
	
	 of Mathematics, 110 LCB, 155 S 1400 E RM 233, Salt Lake
	
	 City, UT 84112-0090, USA, Tel: +1 801 581 5254, FAX: +1
	
	 801 581 4148, e-mail: \path|beebe@math.utah.edu|,
	
	 \path|beebe@acm.org|, \path|beebe@computer.org|
	
	 (Internet), URL:
	
	 \path|http://www.math.utah.edu/~beebe/|},
  bibdate = {Tue Dec 13 08:30:58 MST 2005},
  bibsource = {http://portal.acm.org/},
  coden = {SINODQ},
  file = {oopsla05pql.pdf:oopsla05pql.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {3},
  gp_rel_lang = {5},
  issn = {0362-1340},
  quality = {5},
  relevance = {D3,L5},
  review = {PQL is a Program Query Language that permit to specify very high level
	pointcuts. It permits to match conditions on the history of objects,
	such as: trap all method invocations on objects that were deserialized
	from a socket.
	
	The article is very well written and the scientific contribution is
	excellent. Excellent theoretical framework.}
}

@ARTICLE{Mattern1994Relationships,
  author = {Friedemann Mattern and Reinhard Schwarz},
  title = {Detecting Causal Relationships in Distributed Computations: In Search
	of the Holy Grail},
  journal = {Distributed Computing},
  year = {1994},
  volume = {7},
  pages = {149--174},
  number = {3},
  file = {Mattern1994Relationships.pdf:Mattern1994Relationships.pdf:PDF},
  gp_rel_debug = {!}
}

@ARTICLE{McDowell1989Debugging,
  author = {Charles E. McDowell and David P. Helmbold},
  title = {Debugging concurrent programs},
  journal = {ACM Comput. Surv.},
  year = {1989},
  volume = {21},
  pages = {593--622},
  number = {4},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/76894.76897},
  file = {McDowell1989Debugging.pdf:McDowell1989Debugging.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0360-0300},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Meijer2006LINQ,
  author = {Erik Meijer and Brian Beckman and Gavin Bierman},
  title = {LINQ: reconciling object, relations and XML in the .NET framework},
  booktitle = {SIGMOD '06: Proceedings of the 2006 ACM SIGMOD international conference
	on Management of data},
  year = {2006},
  pages = {706--706},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1142473.1142552},
  file = {Meijer2006LINQ.pdf:Meijer2006LINQ.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-59593-434-0},
  location = {Chicago, IL, USA}
}

@INPROCEEDINGS{DeMeuterAmbient,
  author = {Wolfgang De Meuter and Eric Tanter and Stijn Mostinckx and Tom Van
	Cutsem and Jessie Dedecker},
  title = {Flexible Object Encapsulation for Ambient-Oriented Programming},
  file = {FlexObjEncaps.pdf:to_read/FlexObjEncaps.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Meyer2006Mondrian,
  author = {Michael Meyer and Tudor G\^{\i}rba and Mircea Lungu},
  title = {Mondrian: an agile information visualization framework},
  booktitle = {SoftVis '06: Proceedings of the 2006 ACM symposium on Software visualization},
  year = {2006},
  pages = {135--144},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1148493.1148513},
  file = {Meyer2006Mondrian.pdf:Meyer2006Mondrian.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-59593-464-2},
  location = {Brighton, United Kingdom}
}

@INPROCEEDINGS{Moonen1997DataFlow,
  author = {Leon Moonen},
  title = {A Generic Architecture for Data Flow Analysis to Support Reverse
	Engineering},
  booktitle = {Proceedings of the Second International Workshop on the Theory and
	Practice of Algebraic Specifications (ASF+SDF'97)},
  year = {1997},
  editor = {M.P.A. Sellink},
  series = {Electronic Workshops in Computing},
  address = {Amsterdam},
  month = nov,
  publisher = {Springer-Verlag},
  file = {Moonen1997DataFlow.pdf:Moonen1997DataFlow.pdf:PDF},
  gp_rel_debug = {5},
  review = {Good background information on static analysis, good references.}
}

@ARTICLE{Mukherjea1994Visual,
  author = {Sougata Mukherjea and John T. Stasko},
  title = {Toward visual debugging: integrating algorithm animation capabilities
	within a source-level debugger},
  journal = {ACM Trans. Comput.-Hum. Interact.},
  year = {1994},
  volume = {1},
  pages = {215--244},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/196699.196702},
  file = {Mukherjea1994Visual.pdf:Mukherjea1994Visual.pdf:PDF},
  gp_rel_debug = {!},
  issn = {1073-0516},
  publisher = {ACM Press}
}

@TECHREPORT{Nasre2001Slicing,
  author = {Rupesh Nasre},
  title = {Slicing of Object Oriented Programs},
  institution = {Indian Institute of Technology},
  year = {2001},
  file = {slicing-of-object-oriented.pdf:tod/slicing-of-object-oriented.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  owner = {gpothier},
  quality = {4},
  relevance = {D5},
  review = {Not read entirely yet.},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Navarro2006AWED,
  author = {Luis Daniel Benavides Navarro and Mario S\&\#252;dholt and Wim Vanderperren
	and Bruno De Fraine and Davy Suv\&\#233;e},
  title = {Explicitly distributed AOP using AWED},
  booktitle = {AOSD '06: Proceedings of the 5th international conference on Aspect-oriented
	software development},
  year = {2006},
  pages = {51--62},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1119655.1119665},
  file = {Navarro2006AWED.pdf:Navarro2006AWED.pdf:PDF},
  isbn = {1-59593-300-X},
  location = {Bonn, Germany}
}

@ARTICLE{Netzer1994Optimal,
  author = {Robert H. B. Netzer and Mark H. Weaver},
  title = {Optimal tracing and incremental reexecution for debugging long-running
	programs},
  journal = {SIGPLAN Not.},
  year = {1994},
  volume = {29},
  pages = {313--325},
  number = {6},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/773473.178477},
  file = {Netzer1994Optimal.pdf:Netzer1994Optimal.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0362-1340},
  publisher = {ACM Press}
}

@ARTICLE{Nickolayev1997Clustering,
  author = {O. Y. Nickolayev and P. C. Roth and D. A. Reed},
  title = {Real-Time Statistical Clustering for Event Trace
	
	 Reduction},
  journal = {The International Journal of Supercomputer
	
	 Applications and High Performance Computing},
  year = {1997},
  volume = {11},
  pages = {144--159},
  number = {2},
  month = {Summer},
  acknowledgement = {Nelson H. F. Beebe, University of Utah, Department
	
	 of Mathematics, 322 INSCC, 155 S 1400 E RM 233, Salt
	
	 Lake City, UT 84112-0090, USA, Tel: +1 801 581 5254,
	
	 FAX: +1 801 581 4148, e-mail:
	
	 \path|beebe@math.utah.edu|, \path|beebe@acm.org|,
	
	 \path|beebe@computer.org| (Internet), URL:
	
	 \path|http://www.math.utah.edu/~beebe/|},
  bibdate = {Thu Jun 26 18:17:48 1997},
  coden = {IJSCFG},
  file = {Cluster.pdf:Cluster.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {3},
  issn = {1078-3482},
  quality = {5},
  relevance = {D3},
  review = {The article presents a mean to reduce the volume of performance data
	for highly paralell computations. The data from processors that perform
	similar tasks (or more generally that have generate similar measurements)
	are clustered and only data from a few representatives is captured.
	Cluster membership is recomputed periodically.
	
	The article does not deal with debugging, but states that a full event
	capture can be used for profiling, timing and counting).
	
	Clustering does not handle unexpected events, which is the main goal
	of a debugger.}
}

@MISC{ChronicleWeb,
  author = {Robert O'Callahan},
  title = {Chronicle recorder},
  howpublished = {http://code.google.com/p/chronicle-recorder/},
  file = {:OCallahan2007Amber.pdf:PDF},
  owner = {gpothier},
  timestamp = {2008.01.10}
}

@MISC{OmnicoreDebuggerWeb,
  author = {OmniCore},
  title = {{CodeGuide} back-in-time debugger},
  gp_rel_debug = {5},
  owner = {gpothier},
  review = {http://www.omnicore.com/debugger.htm},
  timestamp = {2006.10.05}
}

@INPROCEEDINGS{Orso2005Selective,
  author = {Orso, Alessandro and Kennedy, Bryan},
  title = {Selective capture and replay of program executions},
  booktitle = {WODA '05: Proceedings of the third international workshop on Dynamic
	analysis},
  year = {2005},
  pages = {1--7},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1083246.1083251},
  file = {Orso2005Selective.pdf:Orso2005Selective.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-59593-126-0},
  location = {St. Louis, Missouri}
}

@ARTICLE{Patrascu2008Succincter,
  author = {Mihai Patrascu},
  title = {Succincter},
  journal = {Foundations of Computer Science, Annual IEEE Symposium on},
  year = {2008},
  volume = {0},
  pages = {305-313},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/FOCS.2008.83},
  file = {Patrascu2008Succincter.pdf:Patrascu2008Succincter.pdf:PDF},
  issn = {0272-5428},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{sawzall,
  author = {Rob Pike and Sean Dorward and Robert Griesemer and Sean Quinlan},
  title = {Interpreting the Data: Parallel Analysis with Sawzall},
  file = {sawzall-sciprog.pdf:sawzall-sciprog.pdf:PDF},
  owner = {gpothier},
  relevance = {4},
  review = {Description of one of the parallell querying techniques employed at
	Google},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Potanin2004Snapshot,
  author = {Alex Potanin and James Noble and Robert Biddle},
  title = {Snapshot Query-Based Debugging},
  booktitle = {ASWEC '04: Proceedings of the 2004 Australian Software Engineering
	Conference (ASWEC'04)},
  year = {2004},
  pages = {251},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  file = {Potanin2004Snapshot.pdf:Potanin2004Snapshot.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {0-7695-2089-8}
}

@ARTICLE{Powell1983database,
  author = {Michael L. Powell and Mark A. Linton},
  title = {A database model of debugging},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {1983},
  volume = {8},
  pages = {67--70},
  number = {4},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1006140.1006163},
  file = {p67-powell.pdf:p67-powell.pdf:PDF},
  gp_quality = {1},
  gp_rel_debug = {3},
  issn = {0163-5948},
  publisher = {ACM Press},
  quality = {1},
  relevance = {D3},
  review = {Incomplete article. Presents a database system that stores static
	facts about a program,and a query language that permits to determine
	program properties. They claim to also store dynamic data but there
	is nothing concrete.}
}

@MASTERSTHESIS{Ranganath2002ObjectFlow,
  author = {Venkatesh Prasad Ranganath},
  title = {Object-flow analysis for optimizing finite-state models of Java software},
  school = {Kansas State University},
  year = {2002},
  file = {Ranganath2002ObjectFlow.pdf:Ranganath2002ObjectFlow.pdf:PDF},
  gp_rel_debug = {4},
  owner = {gpothier},
  timestamp = {2007.05.29}
}

@INPROCEEDINGS{Reed1993Pablo,
  author = {D. A. Reed and R. A. Aydt and R. J. Noe and P. C. Roth and K. A.
	Shields and B. W. Schwartz and L. F. Tavera},
  title = {Scalable {P}erformance {A}nalysis: {T}he {P}ablo {P}erformance {A}nalysis
	{E}nvironment},
  booktitle = {Proc. Scalable Parallel Libraries Conf.},
  year = {1993},
  pages = {104--113},
  publisher = {IEEE Computer Society},
  file = {Reed1993Pablo.pdf:Reed1993Pablo.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {3},
  review = {High-level description of Pablo, a performance monitoring environment
	for highly-parallel applications.
	
	The paper mainly addresses the issue of trace volume and how to reduce
	it/deal with it.
	
	Key points: 
	
	Granularity throttling: there are three levels of trace granularity
	at each instrumentation point (events, counts, profiles). The throttling
	mechanism switches between these modes according to user-defined
	bandwidth limits
	
	Clustering: statistical clustering permits to record only information
	from representatives CPUs
	
	Visualization: the user is immersed in performance data using VR techniques
	
	
	Source-level instrumentation},
  url = {citeseer.ist.psu.edu/reed93scalable.html}
}

@MASTERSTHESIS{Ritzkowski2006Thesis,
  author = {Stephan Ritzkowski},
  title = {Omniscient Slicing for Aspect-Debugging},
  school = {Software Technology Group, Darmstadt University of Technology, Germany},
  year = {2006},
  type = {Diploma thesis},
  note = {\url{http://www.st.informatik.tu-darmstadt.de/public/Thesis.jsp?id=81}},
  file = {Ritzkowski2006Thesis.pdf:Ritzkowski2006Thesis.pdf:PDF},
  gp_rel_debug = {5},
  keywords = {debug-aop},
  owner = {gpothier},
  timestamp = {2007.09.14}
}

@ARTICLE{DesRivieres2004Eclipse,
  author = {Jim des Rivi{\`e}res and John Wiegand},
  title = {Eclipse: {A} platform for integrating development tools},
  journal = {IBM Systems Journal},
  year = {2004},
  volume = {43},
  pages = {371--383},
  number = {2},
  bibdate = {2006-01-09},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/journals/ibmsj/ibmsj43.html#RivieresW04},
  file = {DesRivieres2004Eclipse.pdf:DesRivieres2004Eclipse.pdf:PDF},
  url = {http://dx.doi.org/10.1147/sj.432.0371}
}

@INPROCEEDINGS{Roman1992Pavane:,
  author = {Gruia-Catalin Roman and
	
	Kenneth C. Cox and
	
	C. Donald Wilcox and
	
	Jerome Y. Plun},
  title = {Pavane: A System for Declarative Visualization of Concurrent Computations},
  booktitle = {Journal of Visual Languages and Computing,},
  year = {1992},
  file = {91-26 (Pavane) JVLC.pdf:91-26 (Pavane) JVLC.pdf:PDF},
  owner = {gpothier},
  rating = {5},
  timestamp = {2006.02.18}
}

@INPROCEEDINGS{RomanDeclarative,
  author = {Gruia-Catalin Roman and Christine Julien and Amy L. Murphy},
  title = {A Declarative Approach to Agent-Centered Context-Aware Computing
	in Ad Hoc Wireless Environments},
  file = {02-22 (Declerative Approach) SELMAS 2002.pdf:to_read/02-22 (Declerative Approach) SELMAS 2002.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{RudiakGouldHaskell,
  author = {Ben Rudiak-Gould and Alan Mycroft and Simon Peyton Jones},
  title = {Haskell is Not Not ML},
  file = {Haskell is not ML.pdf:to_read/Haskell is not ML.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Roethlisberger2008Exploiting,
  author = {David Röthlisberger and Orla Greevy and Oscar Nierstrasz},
  title = {Exploiting Runtime Information in the IDE},
  booktitle = {Proceedings of the 2008 International
	
	Conference on Program Comprehension (ICPC 2008)},
  year = {2008},
  pages = {(To appear)},
  file = {Roethlisberger2008Exploiting.pdf:Roethlisberger2008Exploiting.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {4},
  owner = {gpothier},
  review = {Presents and extension of the Squeak IDE where runtime information
	is presented along with source code.
	
	For instance, it is possible to see which methods are called at runtime,
	or which values are held by a certain variable at runtime.
	
	The information is collected through partial behavioral reflection.
	No details are given on how it is stored or queried (but it seems
	to be all in memory).
	
	Application to Java is not immediate, as Java provides static type
	information.},
  timestamp = {2008.04.03}
}

@INPROCEEDINGS{Sadakane2010FullyFunctional,
  author = {K. Sadakane and G. Navarro},
  title = {Fully-Functional Succinct Trees},
  booktitle = {Proc. 21st Annual ACM-SIAM Symposium on Discrete Algorithms (SODA)},
  year = {2010},
  note = {To appear},
  file = {Sadakane2010FullyFunctional.pdf:Sadakane2010FullyFunctional.pdf:PDF}
}

@INPROCEEDINGS{Saito2005Jockey,
  author = {Yasushi Saito},
  title = {Jockey: a user-space library for record-replay debugging},
  booktitle = {Proceedings of the sixth international symposium on Automated analysis-driven
	debugging (AADEBUG 2005)},
  year = {2005},
  pages = {69--76},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1085130.1085139},
  file = {Saito2005Jockey.pdf:Saito2005Jockey.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {1-59593-050-7},
  location = {Monterey, California, USA},
  quality = {5},
  relevance = {D5},
  review = {Jockey is a system that permits to deterministically replay a non-deterministic
	program by logging all sources of non-determinism (IO accesses, user
	interaction...)
	
	Many low-level trics, implementation seems highly complex.
	
	Trace volume is reduced because only some events are logged.
	
	However there is no support for multi-threaded programs
	
	Speed and space benchmarks provided.}
}

@INPROCEEDINGS{Schwarz1992Causality,
  author = {Reinhard Schwarz},
  title = {Causality in distributed systems},
  booktitle = {EW 5: Proceedings of the 5th workshop on ACM SIGOPS European workshop},
  year = {1992},
  pages = {1--5},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/506378.506423},
  file = {Schwarz1992Causality.pdf:Schwarz1992Causality.pdf:PDF},
  gp_rel_debug = {!},
  location = {Mont Saint-Michel, France}
}

@ARTICLE{Schafer2006Sextant,
  author = {Thorsten Sch{\"a}fer and Michael Eichberg and Michael Haupt and Mira
	Mezini},
  title = {The SEXTANT Software Exploration Tool},
  journal = {IEEE Transactions on Software Engineering},
  year = {2006},
  volume = {32},
  pages = {753-768},
  number = {9},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/TSE.2006.94},
  file = {Schafer2006Sextant.pdf:Schafer2006Sextant.pdf:PDF},
  gp_quality = {!},
  gp_rel_debug = {4},
  issn = {0098-5589},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{Schafer2005Flexibility,
  author = {Thorsten Sch{\"a}fer and Mira Mezini},
  title = {Towards More Flexibility in Software Visualization Tools},
  booktitle = {VISSOFT '05: Proceedings of the 3rd IEEE International Workshop on
	Visualizing Software for Program Understanding and Analysis (VISSOFT'05)},
  year = {2005},
  pages = {64--69},
  address = {Washington, DC, USA},
  month = {September},
  publisher = {IEEE Computer Society},
  file = {Schafer2005Flexibility.pdf:Schafer2005Flexibility.pdf:PDF},
  gp_quality = {!},
  gp_rel_debug = {4},
  isbn = {0-7803-9540-9}
}

@ARTICLE{Seshadri1994Sequence,
  author = {Praveen Seshadri and Miron Livny and Raghu Ramakrishnan},
  title = {Sequence Query Processing},
  journal = {SIGMOD Record (ACM Special Interest Group on Management of Data)},
  year = {1994},
  volume = {23},
  pages = {430--441},
  number = {2},
  month = jun,
  acknowledgement = {Nelson H. F. Beebe, University of Utah, Department
	
	 of Mathematics, 110 LCB, 155 S 1400 E RM 233, Salt Lake
	
	 City, UT 84112-0090, USA, Tel: +1 801 581 5254, FAX: +1
	
	 801 581 4148, e-mail: \path|beebe@math.utah.edu|,
	
	 \path|beebe@acm.org|, \path|beebe@computer.org|
	
	 (Internet), URL:
	
	 \path|http://www.math.utah.edu/~beebe/|},
  affiliation = {Dept. of Comput. Sci., Wisconsin Univ., Madison, WI,
	
	 USA},
  bibdate = {Mon Jan 12 08:45:48 MST 2004},
  bibsource = {http://portal.acm.org/},
  classification = {C4250 (Database theory)},
  coden = {SRECD8},
  file = {p430-seshadri.pdf:p430-seshadri.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {4},
  issn = {0163-5808},
  keywords = {Bottom-up algorithm; Cost estimates; Future research; Intermediate
	results caching; Meta-data; Query evaluation plan generation; Query
	transformations; Sequence query optimization; Sequence query processing},
  quality = {5},
  relevance = {D4},
  review = {The paper presents query optimization techniques for sequential database,
	as opposed to relational databases. They propose a few basic sequence
	operators such as selection, projection, positional offset, value
	offset (for handling null values), aggregate operators and compose
	operator.
	
	Many optimisations are based on scope evaluation. They also attach
	great importance to the access cost of the base sequences.
	
	They only deal with the optimization of the query plan, not with the
	physical storage.
	
	Our case is a small subset of their model: projection and selection
	applied to a n-ary compose operator.},
  thesaurus = {Buffer storage; Database theory; Optimisation; Query
	
	 processing; Series [mathematics]},
  xxcrossref = {Anonymous:1994:ASI}
}

@INPROCEEDINGS{Shepherd2007Natural,
  author = {David Shepherd and Zachary P. Fry and Emily Hill and Lori Pollock
	and K. Vijay-Shanker},
  title = {Using natural language program analysis to locate and understand
	action-oriented concerns},
  booktitle = {AOSD '07: Proceedings of the 6th international conference on Aspect-oriented
	software development},
  year = {2007},
  pages = {212--224},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/1218563.1218587},
  file = {Shepherd2007Natural.pdf:Shepherd2007Natural.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-59593-615-7},
  location = {Vancouver, British Columbia, Canada}
}

@ARTICLE{Snodgrass1984Relational,
  author = {Richard Snodgrass},
  title = {Monitoring in a software development environment: A relational approach},
  journal = {SIGPLAN Not.},
  year = {1984},
  volume = {19},
  pages = {124--131},
  number = {5},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/390011.808257},
  file = {p124-snodgrass.pdf:p124-snodgrass.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  issn = {0362-1340},
  publisher = {ACM Press},
  relevance = {D5},
  review = {The paper presents an architecture for monitoring distributed applications.
	
	Sensors in the monitored program sends events to a remote monitor,
	which also acts as a frontend to the user.
	
	The user issues queries in the TQuel language, which is a declarative
	language supporting temporal queries on relational data.
	
	The queries are compiled into update networks which enable sensors
	and interprets events, thus the queries must be formulated beforehand
	if events are to be registered.
	
	Performance: 7 data records per second, "two orders of magnitude too
	slow" (for non optimized update networks)
	
	600 records per second (network)
	
	It seems the backend is not a real relational database.}
}

@INPROCEEDINGS{Sosic1994Cache,
  author = {Rok Sosic},
  title = {History Cache: Hardware Support for Reverse Execution},
  year = {1994},
  file = {sosic94history.pdf:tod/sosic94history.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {3},
  owner = {gpothier},
  quality = {3},
  relevance = {D3},
  review = {Description of a technique to reduce the size of generated log data
	at a low level (processor level).
	
	The technique is to drop certain history items (those that trace store
	instructions at a given location in consecutive instants). This obviously
	leads to imprecise information.
	
	Interesting is the ability to perform real-time checkpoints (snapshots
	of a process' memory).
	
	
	Writing quality is not very good, could be more compact.},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Sosic1992Dynascope,
  author = {Rok Sosič},
  title = {Dynascope: a tool for program directing},
  booktitle = {PLDI '92: Proceedings of the ACM SIGPLAN 1992 conference on Programming
	language design and implementation},
  year = {1992},
  pages = {12--21},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/143095.143110},
  file = {Sosic1992Dynascope.pdf:Sosic1992Dynascope.pdf:PDF},
  gp_rel_debug = {4},
  isbn = {0-89791-475-9},
  location = {San Francisco, California, United States}
}

@INPROCEEDINGS{Srinivasan2004Flashback,
  author = {Sudarshan M. Srinivasan and Srikanth Kandula and Christopher R. Andrews
	and Yuanyuan Zhou},
  title = {Flashback: a lightweight extension for rollback and deterministic
	replay for software debugging},
  booktitle = {ATEC '04: Proceedings of the annual conference on USENIX Annual Technical
	Conference},
  year = {2004},
  pages = {3--3},
  address = {Berkeley, CA, USA},
  publisher = {USENIX Association},
  file = {Srinivasan2004Flashback.pdf:Srinivasan2004Flashback.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  location = {Boston, MA},
  review = {Implements the same mechanism as Jockey, albeit in a different manner
	(uses a patched kernel, and thus requires administrative privileged).
	
	I don't see any significant difference with Jockey.
	
	Provide interesting benchmarks. In particular, it shows that for a
	typical web server that is network-constrained, the client doesn't
	notice the difference between normal and supervised execution. However,
	the load on the server is 2-4 times higher.}
}

@TECHREPORT{StaskoThreeDimensional,
  author = {John T. Stasko},
  title = {Three-Dimensional Computation Visualization},
  institution = {Georgia Institute of Technology},
  abstract = {Systems supporting the visualization and animation of algorithms,
	programs, and computa-
	
	tions have focused primarily on two-dimensional graphics to date.
	In this paper we identify
	
	the need for three-dimensional graphics in these types of displays,
	and we describe how 3D
	
	imagery best can be used for visualizing computations. We also introduce
	an animation
	
	toolkit that supports simpli ed development of 3D computation visualizations.
	A few exam-
	
	ples of computation visualizations created with the toolkit are described
	and included. Our
	
	methodology, although speci cally applied to computation visualization,
	is general-purpose
	
	and can be used to build a variety of 3D information visualizations
	and animations.},
  file = {3d visualization of computations.pdf:3d visualization of computations.pdf:PDF},
  keywords = {softvis},
  owner = {gpothier},
  timestamp = {2006.02.18}
}

@INPROCEEDINGS{Steimann2006Paradoxical,
  author = {Friedrich Steimann},
  title = {The paradoxical success of aspect-oriented programming},
  booktitle = {OOPSLA '06: Proceedings of the 21st annual ACM SIGPLAN conference
	on Object-oriented programming systems, languages, and applications},
  year = {2006},
  pages = {481--497},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1167473.1167514},
  file = {Steimann2006Paradoxical.pdf:Steimann2006Paradoxical.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {3},
  isbn = {1-59593-348-4},
  location = {Portland, Oregon, USA},
  review = {Not read entirely.
	
	This is a rebuttal of AOP, essentially arguing that AOP doesn't help
	modularization but on the contrary hampers it, because it accesses
	encapsulated information without the knowledge of the base program.}
}

@INPROCEEDINGS{Stonebraker2007OneSizeFitsAll,
  author = {Michael Stonebraker and Chuck Bear and Ugur {\c C}etintemel and Mitch
	Cherniack and Tingjian Ge and Nabil Hachem and Stavros Harizopoulos
	and John Lifter and Jennie Rogers and Stanley B. Zdonik},
  title = {One Size Fits All? Part 2: Benchmarking Studies},
  booktitle = {Conference on Innovative Data Systems Research (CIDR 2007)},
  year = {2007},
  pages = {173--184},
  publisher = {www.crdrdb.org},
  bibdate = {2007-03-06},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/cidr/cidr2007.html#StonebrakerBCCGHHLRZ07},
  file = {Stonebraker2007OneSizeFitsAll.pdf:Stonebraker2007OneSizeFitsAll.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {3},
  review = {The authors claim that the dominant relational paradigm for database
	management is not good for all applications. They cite the example
	of stream processing and data warehouse and show that special-purpose
	system can beat RDBMS by an order of magnitude.
	
	The paper makes a good point for specialized databases.},
  url = {http://www.cidrdb.org/cidr2007/papers/cidr07p20.pdf}
}

@INPROCEEDINGS{StrattonProposal,
  author = {David Stratton},
  title = {A Program Visualisation Meta-Language Proposal},
  file = {A Program Visualization Meta-Language Proposal - Stratton2001.pdf:to_read/A Program Visualization Meta-Language Proposal - Stratton2001.pdf:PDF},
  owner = {gpothier},
  quality = {3},
  relevance = {4},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Strein2006CrossLanguage,
  author = {Dennis Strein and Hans Kratz and Welf Lowe},
  title = {Cross-Language Program Analysis and Refactoring},
  booktitle = {SCAM '06: Proceedings of the Sixth IEEE International Workshop on
	Source Code Analysis and Manipulation},
  year = {2006},
  pages = {207--216},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://dx.doi.org/10.1109/SCAM.2006.10},
  file = {Strein2006CrossLanguage.pdf:Strein2006CrossLanguage.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {0-7695-2353-6}
}

@INPROCEEDINGS{DeSutter2005Backtracking,
  author = {Bjorn De Sutter and Bruno De Bus and Michiel Ronsse and Koen De Bosschere},
  title = {Backtracking and dynamic patching for free},
  booktitle = {AADEBUG'05: Proceedings of the sixth international symposium on Automated
	analysis-driven debugging},
  year = {2005},
  pages = {83--88},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1085130.1085141},
  file = {DeSutter2005Backtracking.pdf:DeSutter2005Backtracking.pdf:PDF},
  gp_rel_debug = {5},
  isbn = {1-59593-050-7},
  location = {Monterey, California, USA}
}

@ARTICLE{Tallam2005Extended,
  author = {Sriraman Tallam and Rajiv Gupta and Xiangyu Zhang},
  title = {Extended Whole Program Paths},
  journal = {Parallel Architectures and Compilation Techniques, International
	Conference on},
  year = {2005},
  volume = {0},
  pages = {17-26},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/PACT.2005.22},
  file = {Tallam2005Extended.pdf:Tallam2005Extended.pdf:PDF},
  gp_rel_debug = {4},
  issn = {1089-795X},
  publisher = {IEEE Computer Society},
  review = {The paper presents a technique to capture both control flow and data
	dependence (def-use) graphs at the same time, using an extension
	of control flow trace capture. Basically, the idea is to add checks
	before "use" statements to disambiguate which def was the relevant
	one at runtime. The result of the disambiguation is encoded in the
	control flow of the checks.}
}

@INPROCEEDINGS{TanakaViola,
  author = {Jiro Tanaka and Hiroaki Kameyama},
  title = {Figures and Grammars: Meta-GUI Tool for Future Human-Computer Interaction},
  file = {viola.pdf:viola.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.23}
}

@INPROCEEDINGS{Tip1995Slicing,
  author = {Frank Tip},
  title = {A Survey of Program Slicing Techniques},
  year = {1995},
  file = {tip95survey.pdf:tod/tip95survey.pdf:PDF},
  keywords = {Program slicing, static slicing, dynamic slicing, program analysis,
	debugging, data dependence, control dependence, program dependence
	graph.},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@ARTICLE{Tolmach1995Debugger,
  author = {Andrew P. Tolmach and Andrew W. Appel},
  title = {A Debugger for Standard {ML}},
  journal = {Journal of Functional Programming},
  year = {1995},
  volume = {5},
  pages = {155-200},
  number = {2},
  file = {Tolmach1995Debugger.pdf:Tolmach1995Debugger.pdf:PDF},
  gp_rel_debug = {5},
  url = {citeseer.ist.psu.edu/tolmach93debugger.html}
}

@INPROCEEDINGS{Tolmach1990Debugging,
  author = {Andrew P. Tolmach and Andrew W. Appel},
  title = {Debugging standard ML without reverse engineering},
  booktitle = {LFP '90: Proceedings of the 1990 ACM conference on LISP and functional
	programming},
  year = {1990},
  pages = {1--12},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/91556.91564},
  file = {Tolmach1990Debugging.pdf:Tolmach1990Debugging.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  isbn = {0-89791-368-X},
  location = {Nice, France},
  review = {Describes a debugger for the SML-NJ ML compiler.
	
	The authors use program instrumentation to capture meaningful events
	instead of the techniques traditionally used by source-level debuggers
	(ie. placing hard breakpoints) because the compiler performs extensive
	modifications and optimizations of the program.
	
	The instrumentation points are function definition, function entry,
	application, and variable binding. The instrumentation code at events
	only record a timestamp for the event, and the value of the variable
	for variable binding. 
	
	Additionally, checkpoints are taken periodically so as to be able
	to restore the state of the program. The checkpoints comprises three
	groups of data: continuations (represent the most part of the process'
	memory, but cheap to obtain), mutable storage (expensive to obtain),
	and IO state.
	
	
	The debugger permits to set temporal and location breakpoints. A temporal
	breakpoint corresponds to a given timestamp and causes the debugger
	to stop when the desired timestamp is reached (backward or forward).
	Location breakpoints permit to stop at the next or previous time
	a given location is reached.
	
	It is possible to determine the value of variables at any point in
	time, and to know which statement assigned them their value.}
}

@ARTICLE{Tzouramanis1999Overlapping,
  author = {Theodoros Tzouramanis and Yannis Manolopoulos and Nikos A. Lorentzos},
  title = {Overlapping B+-Trees: An Implementation of a Transaction Time Access
	Method.},
  journal = {Data Knowl. Eng.},
  year = {1999},
  volume = {29},
  pages = {381-404},
  number = {3},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://dx.doi.org/10.1016/S0169-023X(98)00046-9}
}

@MISC{UndoDBWeb,
  author = {{Undo Ltd.}},
  title = {{UndoDB}},
  howpublished = {http://undo-software.com/index.html},
  gp_quality = {5},
  gp_rel_debug = {5},
  owner = {gpothier},
  review = {Back-in-time debugger for linux
	
	Currently does not support threads.
	
	Used with gdb and DDD},
  timestamp = {2006.10.05}
}

@ARTICLE{Ungar1997Immediacy,
  author = {David Ungar and Henry Lieberman and Christopher Fry},
  title = {Debugging and the experience of immediacy},
  journal = {Commun. ACM},
  year = {1997},
  volume = {40},
  pages = {38--43},
  number = {4},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/248448.248457},
  file = {Ungar1997Immediacy.pdf:Ungar1997Immediacy.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0001-0782},
  publisher = {ACM}
}

@INPROCEEDINGS{Usui2005Bugdel,
  author = {Yoshiyuki Usui and Shigeru Chiba},
  title = {Bugdel: An Aspect-Oriented Debugging System},
  booktitle = {APSEC '05: Proceedings of the 12th Asia-Pacific Software Engineering
	Conference (APSEC'05)},
  year = {2005},
  pages = {790--795},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://dx.doi.org/10.1109/APSEC.2005.48},
  file = {Usui2005Bugdel.pdf:Usui2005Bugdel.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {4},
  isbn = {0-7695-2465-6},
  review = {Bugdel is a DSAL for debugging. It permits to declare joinpoints that
	are more adecuate to debugging tasks than general-purpose joinpoints
	of AspectJ. For instance, it is possible to declare a joinpoint on
	a line number, or a pointcut on all lines of a method. Another difference
	with a GPAL such as AspectJ is the possibility to access local variables
	and private fields in the advice.
	
	A few useful methods are provided for implementing advice bodies,
	such as opening a class file editor in Eclipse, or waiting until
	the user presses an OK button.
	
	Joinpoints are specified only through a GUI (Eclipse plugin). Advices
	are coded in Java.}
}

@INPROCEEDINGS{UustaluDataflow,
  author = {Tarmo Uustalu and Varmo Vene},
  title = {The Essence of Dataﬂow Programming},
  file = {essence.pdf:to_read/essence.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Vallee-Rai1999Soot,
  author = {Raja Vallée-Rai and Phong Co and Etienne Gagnon and Laurie Hendren
	and Patrick Lam and Vijay Sundaresan},
  title = {Soot - a Java bytecode optimization framework},
  booktitle = {CASCON '99: Proceedings of the 1999 conference of the Centre for
	Advanced Studies on Collaborative research},
  year = {1999},
  pages = {13},
  publisher = {IBM Press},
  file = {Vallee-Rai1999Soot.pdf:Vallee-Rai1999Soot.pdf:PDF},
  gp_rel_debug = {4},
  gp_rel_lang = {4},
  location = {Mississauga, Ontario, Canada},
  review = {The paper presents Soot, a framework for optimizing Java programs.
	
	The process is divided into steps:
	
	- bytecode is converted to Baf, a stack-based language very similar
	to bytecode but in which all instructions are typed.
	
	- Baf is converted to Jimple, a 3-adress representation abstracting
	stack operations.
	
	- Jimple is converted to Grimple, an unstructured representation of
	Java bytecode which is similar to Java source code
	
	- Grimple is converted back to Baf
	
	- Baf is converted back to bytecode.
	
	
	At each steps some optimizations can be performed.
	
	The paper also presents good experimental results (not read)}
}

@INPROCEEDINGS{Vanderperren2005Stateful,
  author = {Wim Vanderperren and Davy Suv{\'e}e and Mar{\'i}a Agustina Cibr{\'a}n
	and Bruno De Fraine},
  title = {Stateful Aspects in {JA}sCo},
  booktitle = {Software Composition},
  year = {2005},
  editor = {Thomas Gschwind and Uwe A{\ss}mann and Oscar Nierstrasz},
  volume = {3628},
  series = {Lecture Notes in Computer Science},
  pages = {167--181},
  publisher = {Springer},
  bibdate = {2005-10-28},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/soco/sc2005.html#VanderperrenSCF05},
  file = {Vanderperren2005Stateful.pdf:Vanderperren2005Stateful.pdf:PDF},
  isbn = {3-540-28748-5},
  url = {http://dx.doi.org/10.1007/11550679_13}
}

@INPROCEEDINGS{Vigna2008Broadword,
  author = {Sebastiano Vigna},
  title = {Broadword Implementation of Rank/Select Queries},
  booktitle = {WEA},
  year = {2008},
  editor = {Catherine C. McGeoch},
  volume = {5038},
  series = {Lecture Notes in Computer Science},
  pages = {154--168},
  publisher = {Springer},
  bibdate = {2008-06-03},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/wea/wea2008.html#Vigna08},
  file = {Vigna2008Broadword.pdf:Vigna2008Broadword.pdf:PDF},
  isbn = {978-3-540-68548-7},
  url = {http://dx.doi.org/10.1007/978-3-540-68552-4_12}
}

@MISC{RetroVueWeb,
  author = {VisiComp},
  title = {RetroVue Java Software Visualization Tool},
  howpublished = {http://www.visicomp.com/product/retrovue/index.html},
  gp_rel_debug = {5},
  owner = {gpothier},
  review = {Omniscient debugger for Java
	
	Nice threads view.
	
	Trace size or overhead not specified},
  timestamp = {2006.10.05}
}

@INPROCEEDINGS{DeVolder2006JQuery,
  author = {Kris De Volder},
  title = {{JQ}uery: {A} Generic Code Browser with a Declarative Configuration
	Language},
  booktitle = {PADL},
  year = {2006},
  editor = {Pascal Van Hentenryck},
  volume = {3819},
  series = {Lecture Notes in Computer Science},
  pages = {88--102},
  publisher = {Springer},
  bibdate = {2005-12-29},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/padl/padl2006.html#Volder06},
  file = {DeVolder2006JQuery.pdf:DeVolder2006JQuery.pdf:PDF},
  isbn = {3-540-30947-0},
  url = {http://dx.doi.org/10.1007/11603023_7}
}

@PHDTHESIS{Volder1998Thesis,
  author = {Kris De Volder},
  title = {Type-Oriented Logic Meta Programming},
  school = {Vrije Universiteit Brussel},
  year = {1998},
  file = {Volder1998Thesis.pdf:Volder1998Thesis.pdf:PDF},
  owner = {gpothier},
  timestamp = {2008.08.06}
}

@INPROCEEDINGS{Walker1998Visualizing,
  author = {Robert J. Walker and Gail C. Murphy and Bjorn Freeman-Benson and
	Darin Wright and Darin Swanson and Jeremy Isaak},
  title = {Visualizing dynamic software system information through high-level
	models},
  booktitle = {OOPSLA '98: Proceedings of the 13th ACM SIGPLAN conference on Object-oriented
	programming, systems, languages, and applications},
  year = {1998},
  pages = {271--283},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/286936.286966},
  file = {Walker1998Visualizing.pdf:Walker1998Visualizing.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-58113-005-8},
  location = {Vancouver, British Columbia, Canada}
}

@ARTICLE{Walker2004Protocols,
  author = {Robert J. Walker and Kevin Viggers},
  title = {Implementing protocols via declarative event patterns},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2004},
  volume = {29},
  pages = {159--169},
  number = {6},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1041685.1029918},
  file = {Walker2004Protocols.pdf:Walker2004Protocols.pdf:PDF},
  issn = {0163-5948},
  publisher = {ACM Press}
}

@INPROCEEDINGS{WangDatabases,
  author = {Chen Wang and Wei Wang and Jian Pei and Yongtai Zhu and Baile Shi},
  title = {Scalable Mining of Large Disk-based Graph Databases},
  file = {graphmining.pdf:to_read/graphmining.pdf:PDF},
  owner = {gpothier},
  timestamp = {2006.02.19}
}

@INPROCEEDINGS{Wang2004Compressed,
  author = {Tao Wang and Abhik Roychoudhury},
  title = {Using Compressed Bytecode Traces for Slicing Java Programs},
  booktitle = {ICSE '04: Proceedings of the 26th International Conference on Software
	Engineering},
  year = {2004},
  pages = {512--521},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  file = {Wang2004Compressed.pdf:Wang2004Compressed.pdf:PDF},
  gp_rel_debug = {!!!},
  isbn = {0-7695-2163-0}
}

@ARTICLE{Weiser1982Slices,
  author = {Mark Weiser},
  title = {Programmers Use Slices When Debugging.},
  journal = {Commun. ACM},
  year = {1982},
  volume = {25},
  pages = {446-452},
  number = {7},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  file = {p446-weiser.pdf:p446-weiser.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {3},
  quality = {5},
  relevance = {D3},
  review = {Empirical study of the way programmers understand a program when resolving
	bugs.
	
	Many references to statistical analysis methods.}
}

@INPROCEEDINGS{Wu2006Generation,
  author = {Hui Wu},
  title = {Grammar-driven generation of domain-specific language tools},
  booktitle = {OOPSLA '06: Companion to the 21st ACM SIGPLAN conference on Object-oriented
	programming systems, languages, and applications},
  year = {2006},
  pages = {772--773},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1176617.1176718},
  file = {Wu2006Generation.pdf:Wu2006Generation.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-59593-491-X},
  location = {Portland, Oregon, USA}
}

@INPROCEEDINGS{Wu2005Eclipse,
  author = {Hui Wu and Jeff Gray},
  title = {Testing domain-specific languages in eclipse},
  booktitle = {OOPSLA '05: Companion to the 20th annual ACM SIGPLAN conference on
	Object-oriented programming, systems, languages, and applications},
  year = {2005},
  pages = {173--174},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1094855.1094920},
  file = {Wu2005Eclipse.pdf:Wu2005Eclipse.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {1-59593-193-7},
  location = {San Diego, CA, USA}
}

@INPROCEEDINGS{Wu2005Weaving,
  author = {Hui Wu and Jeff Gray and Suman Roychoudhury and Marjan Mernik},
  title = {Weaving a debugging aspect into domain-specific language grammars},
  booktitle = {SAC '05: Proceedings of the 2005 ACM symposium on Applied computing},
  year = {2005},
  pages = {1370--1374},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1066677.1066986},
  file = {Wu2005Weaving.pdf:Wu2005Weaving.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {5},
  isbn = {1-58113-964-0},
  location = {Santa Fe, New Mexico},
  review = {The paper presents a mean to weave a debugging concern into grammar
	definitions, in the context of DSLs:
	
	- motivation for proper IDE for DSLs is given
	
	- it is noted that many DSL toolings (parser, compiler...) are automatically
	generated from grammar files
	
	- providing ways to map back and forth between the DSL artefacts and
	the generated source code in a General Purpose Language is a tedious
	work.
	
	
	The paper first propose as an alternative the use of AspectJ to modify
	the parser generated by AntLR. The solution is cumbersome because
	it requires an understanding of automatically generated code that
	is not intended to be human-understandable.
	
	Then another solution is proposed: weaving the debugging concern directly
	into the grammar definition. The basis is the DMS tool suite of the
	Semantic Designs company.}
}

@ARTICLE{Xie2003DebuggingCost,
  author = {Min Xie and Bo Yang},
  title = {A Study of the Effect of Imperfect Debugging on Software Development
	Cost},
  journal = {IEEE Trans. Software Eng},
  year = {2003},
  volume = {29},
  pages = {471--473},
  number = {5},
  bibdate = {2003-11-19},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/journals/tse/tse29.html#XieY03},
  file = {Xie2003DebuggingCost.pdf:Xie2003DebuggingCost.pdf:PDF},
  gp_quality = {?},
  gp_rel_debug = {4},
  review = {Very lightly read...
	
	Brief paper outlining a cost model of imperfect debugging (bugs are
	not always properly solved and might introduce more bugs)},
  url = {http://csdl.computer.org/comp/trans/ts/2003/05/e0471abs.htm}
}

@INPROCEEDINGS{Xin2008Indexing,
  author = {Bin Xin and William N. Sumner and Xiangyu Zhang},
  title = {Efficient program execution indexing},
  booktitle = {PLDI},
  year = {2008},
  editor = {Rajiv Gupta and Saman P. Amarasinghe},
  pages = {238--248},
  publisher = {ACM},
  bibdate = {2008-06-16},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/pldi/pldi2008.html#XinSZ08},
  file = {Xin2008Indexing.pdf:Xin2008Indexing.pdf:PDF},
  gp_quality = {4},
  gp_rel_debug = {3},
  isbn = {978-1-59593-860-2},
  review = {Mostly concerned about indexing control flow, not values. Actually,
	they use the term indexing in a very different way than we do (they
	actually roughly mean "numbering statement executions"). Rather low
	overhead (42%). One of the goals is to correlate different executions
	of the same program.},
  url = {http://doi.acm.org/10.1145/1375581.1375611}
}

@INPROCEEDINGS{Xu2007Retrace,
  author = {Min Xu and Vyacheslav Malyugin and Jeffrey Sheldon and Ganesh Venkitachalam
	and Boris Weissman and Vmware Inc},
  title = {Retrace: Collecting execution trace with virtual machine deterministic
	replay},
  booktitle = {In Proceedings of the 3rd Annual Workshop on Modeling, Benchmarking
	and Simulation, MoBS},
  year = {2007},
  file = {Xu2007Retrace.pdf:Xu2007Retrace.pdf:PDF},
  gp_rel_debug = {!!!!}
}

@INPROCEEDINGS{Yokoyama2007Reversible,
  author = {Tetsuo Yokoyama and Robert Gl\"{u}ck},
  title = {A reversible programming language and its invertible self-interpreter},
  booktitle = {PEPM '07: Proceedings of the 2007 ACM SIGPLAN symposium on Partial
	evaluation and semantics-based program manipulation},
  year = {2007},
  pages = {144--153},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {A reversible programming language supports deterministic forward and
	backward computation. We formalize the programming language Janus
	and prove its reversibility. We provide a program inverter for the
	language and implement a self-interpreter that achieves deterministic
	forward and backward interpretation of Janus programs without using
	a computation history. As the self-interpreter is implemented in
	a reversible language, it is invertible using local program inversion.
	Many physical phenomena are reversible and we demonstrate the power
	of Janus by implementing a reversible program for discrete simulation
	of the Schrödinger wave equation that can be inverted as well as
	run forward and backward.},
  doi = {http://doi.acm.org/10.1145/1244381.1244404},
  isbn = {978-1-59593-620-2},
  location = {Nice, France}
}

@INPROCEEDINGS{Zaidman2004Volume,
  author = {Andy Zaidman and Serge Demeyer},
  title = {Managing Trace Data Volume through a Heuristical Clustering Process
	Based on Event Execution Frequency},
  booktitle = {CSMR '04: Proceedings of the Eighth Euromicro Working Conference
	on Software Maintenance and Reengineering (CSMR'04)},
  year = {2004},
  pages = {329},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  file = {Zaidman2004Volume.pdf:Zaidman2004Volume.pdf:PDF},
  isbn = {0-7695-2107-X},
  review = {Not read entirely
	
	Presents a heuristic for trace reduction, but it seems to be run after
	the trace is collected, and is therefore suitable only for analysis.}
}

@ARTICLE{Zeller2002Simplifying,
  author = {Andreas Zeller and Ralf Hildebrandt},
  title = {Simplifying and Isolating Failure-Inducing Input},
  journal = {IEEE Trans. Softw. Eng.},
  year = {2002},
  volume = {28},
  pages = {183--200},
  number = {2},
  address = {Piscataway, NJ, USA},
  doi = {http://dx.doi.org/10.1109/32.988498},
  file = {Zeller2002Simplifying.pdf:Zeller2002Simplifying.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0098-5589},
  publisher = {IEEE Press}
}

@ARTICLE{Zhang2001Visual,
  author = {Kang Zhang and Da-Qian Zhang and Jiannong Cao},
  title = {Design, Construction, and Application of a Generic Visual Language
	Generation Environment.},
  journal = {IEEE Trans. Software Eng.},
  year = {2001},
  volume = {27},
  pages = {289-307},
  number = {4},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://www.computer.org/tse/ts2001/e0289abs.htm}
}

@INPROCEEDINGS{Zhang2007BugPatterns,
  author = {Sai Zhang and Jianjun Zhao},
  title = {On Identifying Bug Patterns in Aspect-Oriented Programs},
  booktitle = {COMPSAC '07: Proceedings of the 31st Annual International Computer
	Software and Applications Conference - Vol. 1- (COMPSAC 2007)},
  year = {2007},
  pages = {431--438},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://dx.doi.org/10.1109/COMPSAC.2007.159},
  file = {Zhang2007BugPatterns.pdf:Zhang2007BugPatterns.pdf:PDF},
  gp_quality = {3},
  gp_rel_debug = {5},
  isbn = {0-7695-2870-8},
  keywords = {debug-aop},
  review = {3.1 Infinite Loop: a particular case of a more general fault
	
	3.2 Scope of Advice: not specific to AOP
	
	
	The difference between a "fault model" (of which various exist for
	AspectJ) and "bug patterns" is not clear at all. I think the referenced
	papers provide much better classifications.}
}

@ARTICLE{Zhang2005Whole,
  author = {Xiangyu Zhang and Rajiv Gupta},
  title = {Whole execution traces and their applications},
  journal = {ACM Trans. Archit. Code Optim.},
  year = {2005},
  volume = {2},
  pages = {301--334},
  number = {3},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1089008.1089012},
  file = {Zhang2005Whole.pdf:Zhang2005Whole.pdf:PDF},
  gp_quality = {5},
  gp_rel_debug = {5},
  gp_rel_lang = {3},
  issn = {1544-3566},
  publisher = {ACM Press},
  review = {The authors present several lossless trace compression techniques
	used to record complete execution traces (or WETs) of machine-level
	programs. The optimizations rely extensively on static analyses,
	with the program being represented as a graph in where:
	
	- nodes are statements labeled by oredered <t, val> pairs where t
	is a timestamp and val is the value produced by the statement at
	that timestamp
	
	- data dependence edges denote the dependence between the values produced
	and consumed by different statements
	
	- control dependence edges denote the dependency between conditions
	and the branches that are executed according to their outcome
	
	- control flow edges denote the natural control flow of the program.
	
	
	The optimizations proposed consist in removing redundancies in the
	pairs sequences that label the different edges. An important advantage
	of the proposed algorithms is that they permit to navigate the compressed
	streams of lables forward and backward.
	
	
	Important compression ratios are achieved, with about 700 million
	statement executions are reduced to around 300MB of in-memory trace
	data.
	
	
	Examples of WET usages are dynamic slice computation and matching
	of instruction flow in optimized vs. non-optimized versions of the
	same program.}
}

@ARTICLE{Zhang2004Slicing,
  author = {Xiangyu Zhang and Rajiv Gupta},
  title = {Cost effective dynamic program slicing},
  journal = {SIGPLAN Not.},
  year = {2004},
  volume = {39},
  pages = {94--106},
  number = {6},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/996893.996855},
  file = {Zhang2004Slicing.pdf:Zhang2004Slicing.pdf:PDF},
  gp_rel_debug = {!},
  issn = {0362-1340},
  publisher = {ACM Press}
}

@INPROCEEDINGS{Zhang2006Analysis,
  author = {Xiaolan Zhang and Larry Koved and Marco Pistoia and Sam Weber and
	Trent Jaeger and Guillaume Marceau and Liangzhao Zeng},
  title = {The case for analysis preserving language transformation},
  booktitle = {ISSTA '06: Proceedings of the 2006 international symposium on Software
	testing and analysis},
  year = {2006},
  pages = {191--202},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1146238.1146260},
  file = {Zhang2006Analysis.pdf:Zhang2006Analysis.pdf:PDF},
  gp_rel_debug = {!!},
  isbn = {1-59593-263-1},
  location = {Portland, Maine, USA}
}

@INPROCEEDINGS{Zhao2002Slicing,
  author = {Jianjun Zhao},
  title = {Slicing Aspect-Oriented Software},
  booktitle = {IWPC '02: Proceedings of the 10th International Workshop on Program
	Comprehension},
  year = {2002},
  pages = {251},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  file = {Zhao2002Slicing.pdf:Zhao2002Slicing.pdf:PDF},
  gp_rel_debug = {!},
  isbn = {0-7695-1495-2}
}

@PROCEEDINGS{DBLP:conf/concur/2005,
  title = {CONCUR 2005 - Concurrency Theory, 16th International Conference,
	CONCUR 2005, San Francisco, CA, USA, August 23-26, 2005, Proceedings},
  year = {2005},
  editor = {Mart\'{\i}n Abadi and Luca de Alfaro},
  volume = {3653},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {CONCUR},
  isbn = {3-540-28309-9}
}

@PROCEEDINGS{DBLP:conf/iui/2005,
  title = {Proceedings of the 2005 International Conference on Intelligent User
	Interfaces, January 10-13, 2005, San Diego, California, USA},
  year = {2005},
  editor = {Robert St. Amant and John Riedl and Anthony Jameson},
  publisher = {ACM},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {Intelligent User Interfaces},
  isbn = {1-58113-894-6}
}

@PROCEEDINGS{DBLP:conf/ecoop/1987,
  title = {ECOOP'87 European Conference on Object-Oriented Programming, Paris,
	France, June 15-17, 1987, Proceedings},
  year = {1987},
  editor = {Jean B{\'e}zivin and Jean-Marie Hullot and Pierre Cointe and Henry
	Lieberman},
  volume = {276},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {ECOOP},
  isbn = {3-540-18353-1}
}

@PROCEEDINGS{DBLP:conf/ecoop/2003,
  title = {ECOOP 2003 - Object-Oriented Programming, 17th European Conference,
	Darmstadt, Germany, July 21-25, 2003, Proceedings},
  year = {2003},
  editor = {Luca Cardelli},
  volume = {2743},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {ECOOP},
  isbn = {3-540-40531-3}
}

@PROCEEDINGS{DBLP:conf/chi/2004,
  title = {Proceedings of the 2004 Conference on Human Factors in Computing
	Systems, CHI 2004, Vienna, Austria, April 24 - 29, 2004},
  year = {2004},
  editor = {Elizabeth Dykstra-Erickson and Manfred Tscheligi},
  publisher = {ACM},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {CHI},
  isbn = {1-58113-702-8}
}

@PROCEEDINGS{DBLP:conf/soco/2005,
  title = {Software Composition, 4th International Workshop, SC 2005, Edinburgh,
	UK, April 9, 2005, Revised Selected Papers},
  year = {2005},
  editor = {Thomas Gschwind and Uwe A{\ss}mann and Oscar Nierstrasz},
  volume = {3628},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {Software Composition},
  isbn = {3-540-28748-5}
}

@PROCEEDINGS{DBLP:conf/esec/1999,
  title = {Software Engineering - ESEC/FSE'99, 7th European Software Engineering
	Conference, Held Jointly with the 7th ACM SIGSOFT Symposium on the
	Foundations of Software Engineering, Toulouse, France, September
	1999, Proceedings},
  year = {1999},
  editor = {Oscar Nierstrasz and Michel Lemoine},
  volume = {1687},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {ESEC / SIGSOFT FSE},
  isbn = {3-540-66538-2}
}

@PROCEEDINGS{DBLP:conf/esop/2001,
  title = {Programming Languages and Systems, 10th European Symposium on Programming,
	ESOP 2001 Held as Part of the Joint European Conferences on Theory
	and Practice of Software, ETAPS 2001 Genova, Italy, April 2-6, 2001,
	Proceedings},
  year = {2001},
  editor = {David Sands},
  volume = {2028},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {ESOP},
  isbn = {3-540-41862-8}
}

@MISC{Visual,
  title = {Visual Language Research Bibliography},
  howpublished = {web},
  gp_rel_lang = {5},
  owner = {gpothier},
  relevance = {L5},
  timestamp = {2006.02.23},
  url = {http://web.engr.oregonstate.edu/~burnett/vpl.html}
}

@PROCEEDINGS{DBLP:conf/csmr/2008,
  title = {12th European Conference on Software Maintenance and Reengineering,
	CSMR 2008, April 1-4, 2008, Athens, Greece},
  year = {2008},
  publisher = {IEEE},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {CSMR}
}

@PROCEEDINGS{DBLP:conf/isorc/2004,
  title = {7th IEEE International Symposium on Object-Oriented Real-Time Distributed
	Computing (ISORC 2004), 12-14 May 2004, Vienna, Austria},
  year = {2004},
  publisher = {IEEE Computer Society},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {ISORC},
  isbn = {0-7695-2124-X}
}

@PROCEEDINGS{DBLP:conf/vl/2004,
  title = {2004 IEEE Symposium on Visual Languages and Human-Centric Computing
	(VL/HCC 2004), 26-29 September 2004, Rome, Italy},
  year = {2004},
  publisher = {IEEE Computer Society},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {VL/HCC}
}

@PROCEEDINGS{DBLP:conf/compsac/2002,
  title = {26th International Computer Software and Applications Conference
	(COMPSAC 2002), Prolonging Software Life: Development and Redevelopment,
	26-29 August 2002, Oxford, England, Proceedings},
  year = {2002},
  publisher = {IEEE Computer Society},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {COMPSAC},
  isbn = {0-7695-1727-7}
}

@PROCEEDINGS{DBLP:conf/seke/2001,
  title = {Proceedings of the Thirteenth International Conference on Software
	Engineering {\&} Knowledge Engineering (SEKE'2001), Sheraton Buenos
	Aires Hotel, Buenos Aires, Argentina, June 13-15, 2001},
  year = {2001},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {SEKE},
  owner = {gpothier},
  timestamp = {2006.02.18}
}

@PROCEEDINGS{DBLP:conf/mse/2000,
  title = {2000 International Symposium on Multimedia Software Engineering (ISMSE
	2000), 11-13 December 2000, Taipei, Taiwan},
  year = {2000},
  publisher = {IEEE Computer Society},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {ISMSE},
  isbn = {0-7695-0933-9}
}

@PROCEEDINGS{DBLP:conf/ipps/1997,
  title = {11th International Parallel Processing Symposium (IPPS '97), 1-5
	April 1997, Geneva, Switzerland, Proceedings},
  year = {1997},
  publisher = {IEEE Computer Society},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  booktitle = {IPPS},
  isbn = {0-8186-7792-9}
}

@comment{jabref-meta: selector_keywords:debug-aop;debugging;languages;
slicing;softvis;type systems;visual languages;}

@comment{jabref-meta: groupsversion:3;}

@comment{jabref-meta: groupstree:
0 AllEntriesGroup:;
1 KeywordGroup:debugging\;0\;keywords\;debugging\;0\;0\;;
}

